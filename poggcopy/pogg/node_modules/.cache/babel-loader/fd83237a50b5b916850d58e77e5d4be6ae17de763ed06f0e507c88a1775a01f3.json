{"ast":null,"code":"\"use strict\";\n\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\nvar _decode = _interopRequireDefault(require(\"./decode\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\nvar _promiseUtils = require(\"./promiseUtils\");\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\nvar _ParseOp = require(\"./ParseOp\");\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\nvar _unique = _interopRequireDefault(require(\"./unique\"));\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty2(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context19;\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = _sliceInstanceProperty(_context19 = Object.prototype.toString.call(o)).call(_context19, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context17, _context18;\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty2(_context17 = ownKeys(Object(source), !0)).call(_context17, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context18 = ownKeys(Object(source))).call(_context18, function (key) {\n      _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n} /**\n   * @flow\n   */\n/*:: import type { AttributeMap, OpsMap } from './ObjectStateMutations';*/\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\nvar uuidv4 = require('./uuid');\n/*:: export type Pointer = {\n  __type: string,\n  className: string,\n  objectId: string,\n};*/\n/*:: type SaveParams = {\n  method: string,\n  path: string,\n  body: AttributeMap,\n};*/\n/*:: export type SaveOptions = FullOptions & {\n  cascadeSave?: boolean,\n  context?: AttributeMap,\n};*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\nvar classMap = {};\n\n// Global counter for generating unique Ids for non-single-instance objects\nvar objectCount = 0;\n// On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n\n/**\n * Creates a new model with defined attributes.\n *\n * <p>You won't normally call this method directly.  It is recommended that\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\n * <code>extend</code>.</p>\n *\n * <p>However, if you don't want to use a subclass, or aren't sure which\n * subclass is appropriate, you can use this form:<pre>\n *     var object = new Parse.Object(\"ClassName\");\n * </pre>\n * That is basically equivalent to:<pre>\n *     var MyClass = Parse.Object.extend(\"ClassName\");\n *     var object = new MyClass();\n * </pre></p>\n *\n * @alias Parse.Object\n */\nvar ParseObject = /*#__PURE__*/function () {\n  /**\n   * @param {string} className The class name for the object\n   * @param {object} attributes The initial set of data to store in the object.\n   * @param {object} options The options for this object instance.\n   */\n  function ParseObject(className /*: ?string | { className: string, [attr: string]: mixed }*/, attributes /*:: ?: { [attr: string]: mixed }*/, options /*:: ?: { ignoreValidation: boolean }*/) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    /**\n     * The ID of this object, unique within its class.\n     *\n     * @property {string} id\n     */\n    (0, _defineProperty2.default)(this, \"id\", void 0);\n    (0, _defineProperty2.default)(this, \"_localId\", void 0);\n    (0, _defineProperty2.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    // Enable legacy initializers\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n    var toSet = null;\n    this._objCount = objectCount++;\n    if (typeof className === 'string') {\n      this.className = className;\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error(\"Can't create an invalid Parse Object\");\n    }\n  }\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"attributes\",\n    get: /* Prototype getters / setters */\n\n    function () /*: AttributeMap*/{\n      var stateController = _CoreManager.default.getObjectStateController();\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n\n    /**\n     * The first time this object was saved on the server.\n     *\n     * @property {Date} createdAt\n     * @returns {Date}\n     */\n  }, {\n    key: \"createdAt\",\n    get: function () /*: ?Date*/{\n      return this._getServerData().createdAt;\n    }\n\n    /**\n     * The last time this object was updated on the server.\n     *\n     * @property {Date} updatedAt\n     * @returns {Date}\n     */\n  }, {\n    key: \"updatedAt\",\n    get: function () /*: ?Date*/{\n      return this._getServerData().updatedAt;\n    }\n\n    /* Private methods */\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"_getId\",\n    value: function () /*: string*/{\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     *\n     * @returns {Parse.Object|object}\n     */\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function () /*: ParseObject | { id: string, className: string }*/{\n      if (singleInstance) {\n        var id = this.id;\n        if (!id) {\n          id = this._getId();\n        }\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function () /*: AttributeMap*/{\n      var stateController = _CoreManager.default.getObjectStateController();\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n      var unset = {};\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function () /*: Array<OpsMap>*/{\n      var stateController = _CoreManager.default.getObjectStateController();\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear /*:: ?: Array<string>*/) {\n      var pending = this._getPendingOps();\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function () /*: AttributeMap*/{\n      var attributes = this.attributes;\n      var stateController = _CoreManager.default.getObjectStateController();\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen /*:: ?: Array<any>*/, offline /*:: ?: boolean*/) /*: AttributeMap*/{\n      var json /*: { [key: string]: mixed }*/ = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function () /*: AttributeMap*/{\n      var pending = this._getPendingOps();\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      var json = {};\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function () /*: SaveParams*/{\n      var method = this.id ? 'PUT' : 'POST';\n      var body = this._getSaveJSON();\n      var path = 'classes/' + this.className;\n      if (_CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID')) {\n        if (!this.createdAt) {\n          method = 'POST';\n          body.objectId = this.id;\n        } else {\n          method = 'PUT';\n          path += '/' + this.id;\n        }\n      } else if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData /*: AttributeMap*/) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed /*: boolean*/) {\n      var stateController = _CoreManager.default.getObjectStateController();\n      var state = stateController.getState(this._getStateIdentifier());\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId /*: string*/) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response /*: AttributeMap*/, status /*: number*/) {\n      var changes = {};\n      var stateController = _CoreManager.default.getObjectStateController();\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response)) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n      this._migrateId(response.objectId);\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n  }, {\n    key: \"initialize\",\n    value: /* Public methods */\n\n    function () {\n      // NOOP\n    }\n\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     *\n     * @param seen\n     * @param offline\n     * @returns {object}\n     */\n  }, {\n    key: \"toJSON\",\n    value: function (seen /*: Array<any> | void*/, offline /*:: ?: boolean*/) /*: AttributeMap*/{\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n      var pending = this._getPendingOps();\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n      if (this.id) {\n        json.objectId = this.id;\n      }\n      return json;\n    }\n\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     *\n     * @param {object} other - An other object ot compare\n     * @returns {boolean}\n     */\n  }, {\n    key: \"equals\",\n    value: function (other /*: mixed*/) /*: boolean*/{\n      if (this === other) {\n        return true;\n      }\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     *\n     * @param {string} attr An attribute name (optional).\n     * @returns {boolean}\n     */\n  }, {\n    key: \"dirty\",\n    value: function (attr /*:: ?: string*/) /*: boolean*/{\n      if (!this.id) {\n        return true;\n      }\n      var pendingOps = this._getPendingOps();\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     *\n     * @returns {string[]}\n     */\n  }, {\n    key: \"dirtyKeys\",\n    value: function () /*: Array<string>*/{\n      var pendingOps = this._getPendingOps();\n      var keys = {};\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n      return (0, _keys.default)(keys);\n    }\n\n    /**\n     * Returns true if the object has been fetched.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isDataAvailable\",\n    value: function () /*: boolean*/{\n      var serverData = this._getServerData();\n      return !!(0, _keys.default)(serverData).length;\n    }\n\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n  }, {\n    key: \"toPointer\",\n    value: function () /*: Pointer*/{\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n  }, {\n    key: \"toOfflinePointer\",\n    value: function () /*: Pointer*/{\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n\n    /**\n     * Gets the value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {*}\n     */\n  }, {\n    key: \"get\",\n    value: function (attr /*: string*/) /*: mixed*/{\n      return this.attributes[attr];\n    }\n\n    /**\n     * Gets a relation on the given class for the attribute.\n     *\n     * @param {string} attr The attribute to get the relation for.\n     * @returns {Parse.Relation}\n     */\n  }, {\n    key: \"relation\",\n    value: function (attr /*: string*/) /*: ParseRelation*/{\n      var value = this.get(attr);\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n        value._ensureParentAndKey(this, attr);\n        return value;\n      }\n      return new _ParseRelation.default(this, attr);\n    }\n\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {string}\n     */\n  }, {\n    key: \"escape\",\n    value: function (attr /*: string*/) /*: string*/{\n      var val = this.attributes[attr];\n      if (val == null) {\n        return '';\n      }\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n        val = val.toString();\n      }\n      return (0, _escape2.default)(val);\n    }\n\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     *\n     * @param {string} attr The string name of the attribute.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"has\",\n    value: function (attr /*: string*/) /*: boolean*/{\n      var attributes = this.attributes;\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n      return false;\n    }\n\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {(string|object)} key The key to set.\n     * @param {(string|object)} value The value to give it.\n     * @param {object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n  }, {\n    key: \"set\",\n    value: function (key /*: mixed*/, value /*: mixed*/, options /*:: ?: mixed*/) /*: ParseObject | boolean*/{\n      var changes = {};\n      var newOps = {};\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n      options = options || {};\n      var readonly = [];\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n      var currentAttributes = this.attributes;\n\n      // Calculate new values\n      var newValues = {};\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      }\n\n      // Validate changes\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n          return false;\n        }\n      }\n\n      // Consolidate Ops\n      var pendingOps = this._getPendingOps();\n      var last = pendingOps.length - 1;\n      var stateController = _CoreManager.default.getObjectStateController();\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n      return this;\n    }\n\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @param options\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"unset\",\n    value: function (attr /*: string*/, options /*:: ?: { [opt: string]: mixed }*/) /*: ParseObject | boolean*/{\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @returns {(ParseObject|boolean)}\n     */\n  }, {\n    key: \"increment\",\n    value: function (attr /*: string*/, amount /*:: ?: number*/) /*: ParseObject | boolean*/{\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n\n    /**\n     * Atomically decrements the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to decrement by (optional).\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"decrement\",\n    value: function (attr /*: string*/, amount /*:: ?: number*/) /*: ParseObject | boolean*/{\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"add\",\n    value: function (attr /*: string*/, item /*: mixed*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addAll\",\n    value: function (attr /*: string*/, items /*: Array<mixed>*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addUnique\",\n    value: function (attr /*: string*/, item /*: mixed*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr /*: string*/, items /*: Array<mixed>*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"remove\",\n    value: function (attr /*: string*/, item /*: mixed*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"removeAll\",\n    value: function (attr /*: string*/, items /*: Array<mixed>*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op | undefined} The operation, or undefined if none.\n     */\n  }, {\n    key: \"op\",\n    value: function (attr /*: string*/) /*: ?Op*/{\n      var pending = this._getPendingOps();\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n\n    /**\n     * Creates a new model with identical attributes to this one.\n     *\n     * @returns {Parse.Object}\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() /*: any*/{\n      var clone = new this.constructor(this.className);\n      var attributes = this.attributes;\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || [];\n        // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n        var copy = {};\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n        attributes = copy;\n      }\n      if (clone.set) {\n        clone.set(attributes);\n      }\n      return clone;\n    }\n\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     *\n     * @returns {Parse.Object}\n     */\n  }, {\n    key: \"newInstance\",\n    value: function () /*: any*/{\n      var clone = new this.constructor(this.className);\n      clone.id = this.id;\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n      return clone;\n    }\n\n    /**\n     * Returns true if this object has never been saved to Parse.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isNew\",\n    value: function () /*: boolean*/{\n      return !this.id;\n    }\n\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"existed\",\n    value: function () /*: boolean*/{\n      if (!this.id) {\n        return false;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      var state = stateController.getState(this._getStateIdentifier());\n      if (state) {\n        return state.existed;\n      }\n      return false;\n    }\n\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options /*:: ?: RequestOptions*/) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.id) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 2:\n              _context.prev = 2;\n              query = new _ParseQuery.default(this.className);\n              _context.next = 6;\n              return query.get(this.id, options);\n            case 6:\n              return _context.abrupt(\"return\", true);\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                _context.next = 13;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 13:\n              throw _context.t0;\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n      function exists() {\n        return _exists.apply(this, arguments);\n      }\n      return exists;\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValid\",\n    value: function () /*: boolean*/{\n      return !this.validate(this.attributes);\n    }\n\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {object} attrs The current data to validate.\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n  }, {\n    key: \"validate\",\n    value: function (attrs /*: AttributeMap*/) /*: ParseError | boolean*/{\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Returns the ACL for this object.\n     *\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n  }, {\n    key: \"getACL\",\n    value: function () /*: ?ParseACL*/{\n      var acl = this.get('ACL');\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n      return null;\n    }\n\n    /**\n     * Sets the ACL to be used for this object.\n     *\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {object} options\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n  }, {\n    key: \"setACL\",\n    value: function (acl /*: ParseACL*/, options /*:: ?: mixed*/) /*: ParseObject | boolean*/{\n      return this.set('ACL', acl, options);\n    }\n\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     *\n     * @param {string} [keys] - specify which fields to revert\n     */\n  }, {\n    key: \"revert\",\n    value: function () /*: void*/{\n      var keysToRevert;\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n      if (keys.length) {\n        keysToRevert = [];\n        var _iterator = _createForOfIteratorHelper(keys),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n            if (typeof _key3 === 'string') {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      this._clearPendingOps(keysToRevert);\n    }\n\n    /**\n     * Clears all attributes on a model\n     *\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"clear\",\n    value: function () /*: ParseObject | boolean*/{\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n  }, {\n    key: \"fetch\",\n    value: function (options /*: RequestOptions*/) /*: Promise*/{\n      options = options || {};\n      var fetchOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n      var controller = _CoreManager.default.getObjectController();\n      return controller.fetch(this, true, fetchOptions);\n    }\n\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys /*: String | Array<string | Array<string>>*/, options /*: RequestOptions*/) /*: Promise*/{\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n\n    /**\n     * Saves this object to the server at some unspecified time in the future,\n     * even if Parse is currently inaccessible.\n     *\n     * Use this when you may not have a solid network connection, and don't need to know when the save completes.\n     * If there is some problem with the object such that it can't be saved, it will be silently discarded.\n     *\n     * Objects saved with this method will be stored locally in an on-disk cache until they can be delivered to Parse.\n     * They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection is\n     * available. Objects saved this way will persist even after the app is closed, in which case they will be sent the\n     * next time the app is opened.\n     *\n     * @param {object} [options]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n  }, {\n    key: \"saveEventually\",\n    value: function () {\n      var _saveEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options /*: SaveOptions*/) {\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return this.save(null, options);\n            case 3:\n              _context4.next = 11;\n              break;\n            case 5:\n              _context4.prev = 5;\n              _context4.t0 = _context4[\"catch\"](0);\n              if (!(_context4.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                _context4.next = 11;\n                break;\n              }\n              _context4.next = 10;\n              return _EventuallyQueue.default.save(this, options);\n            case 10:\n              _EventuallyQueue.default.poll();\n            case 11:\n              return _context4.abrupt(\"return\", this);\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n      function saveEventually() {\n        return _saveEventually.apply(this, arguments);\n      }\n      return saveEventually;\n    }()\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     * object.save();</pre>\n     * or<pre>\n     * object.save(attrs);</pre>\n     * or<pre>\n     * object.save(null, options);</pre>\n     * or<pre>\n     * object.save(attrs, options);</pre>\n     * or<pre>\n     * object.save(key, value);</pre>\n     * or<pre>\n     * object.save(key, value, options);</pre>\n     *\n     * Example 1: <pre>\n     * gameTurn.save({\n     * player: \"Jake Cutter\",\n     * diceRoll: 2\n     * }).then(function(gameTurnAgain) {\n     * // The save was successful.\n     * }, function(error) {\n     * // The save failed.  Error is an instance of Parse.Error.\n     * });</pre>\n     *\n     * Example 2: <pre>\n     * gameTurn.save(\"player\", \"Jake Cutter\");</pre>\n     *\n     * @param {string | object | null} [arg1]\n     * Valid options are:<ul>\n     * <li>`Object` - Key/value pairs to update on the object.</li>\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     * @param {string | object} [arg2]\n     * <ul>\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     * <li>`Object` Options - Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * </li>\n     * </ul>\n     * @param {object} [arg3]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n  }, {\n    key: \"save\",\n    value: function (arg1 /*: ?string | { [attr: string]: mixed }*/, arg2 /*: SaveOptions | mixed*/, arg3 /*:: ?: SaveOptions*/) /*: Promise*/{\n      var _this = this;\n      var attrs;\n      var options;\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n      if (attrs) {\n        var validation = this.validate(attrs);\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n        this.set(attrs, options);\n      }\n      options = options || {};\n      var saveOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n      var controller = _CoreManager.default.getObjectController();\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n\n    /**\n     * Deletes this object from the server at some unspecified time in the future,\n     * even if Parse is currently inaccessible.\n     *\n     * Use this when you may not have a solid network connection,\n     * and don't need to know when the delete completes. If there is some problem with the object\n     * such that it can't be deleted, the request will be silently discarded.\n     *\n     * Delete instructions made with this method will be stored locally in an on-disk cache until they can be transmitted\n     * to Parse. They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection\n     * is available. Delete requests will persist even after the app is closed, in which case they will be sent the\n     * next time the app is opened.\n     *\n     * @param {object} [options]\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n  }, {\n    key: \"destroyEventually\",\n    value: function () {\n      var _destroyEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options /*: RequestOptions*/) {\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return this.destroy(options);\n            case 3:\n              _context5.next = 11;\n              break;\n            case 5:\n              _context5.prev = 5;\n              _context5.t0 = _context5[\"catch\"](0);\n              if (!(_context5.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                _context5.next = 11;\n                break;\n              }\n              _context5.next = 10;\n              return _EventuallyQueue.default.destroy(this, options);\n            case 10:\n              _EventuallyQueue.default.poll();\n            case 11:\n              return _context5.abrupt(\"return\", this);\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n      function destroyEventually() {\n        return _destroyEventually.apply(this, arguments);\n      }\n      return destroyEventually;\n    }()\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n  }, {\n    key: \"destroy\",\n    value: function (options /*: RequestOptions*/) /*: Promise*/{\n      options = options || {};\n      var destroyOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n  }, {\n    key: \"pin\",\n    value: function () /*: Promise<void>*/{\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n  }, {\n    key: \"unPin\",\n    value: function () /*: Promise<void>*/{\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              if (localDatastore.isEnabled) {\n                _context6.next = 3;\n                break;\n              }\n              return _context6.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n            case 3:\n              objectKey = localDatastore.getKeyForObject(this);\n              _context6.next = 6;\n              return localDatastore.fromPinWithName(objectKey);\n            case 6:\n              pin = _context6.sent;\n              return _context6.abrupt(\"return\", pin.length > 0);\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee4, this);\n      }));\n      function isPinned() {\n        return _isPinned.apply(this, arguments);\n      }\n      return isPinned;\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n  }, {\n    key: \"pinWithName\",\n    value: function (name /*: string*/) /*: Promise<void>*/{\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n  }, {\n    key: \"unPinWithName\",\n    value: function (name /*: string*/) /*: Promise<void>*/{\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\n     */\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              if (localDatastore.isEnabled) {\n                _context7.next = 3;\n                break;\n              }\n              throw new Error('Parse.enableLocalDatastore() must be called first');\n            case 3:\n              objectKey = localDatastore.getKeyForObject(this);\n              _context7.next = 6;\n              return localDatastore._serializeObject(objectKey);\n            case 6:\n              pinned = _context7.sent;\n              if (pinned) {\n                _context7.next = 9;\n                break;\n              }\n              throw new Error('Cannot fetch an unsaved ParseObject');\n            case 9:\n              result = ParseObject.fromJSON(pinned);\n              this._finishFetch(result.toJSON());\n              return _context7.abrupt(\"return\", this);\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee5, this);\n      }));\n      function fetchFromLocalDatastore() {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      }\n      return fetchFromLocalDatastore;\n    }() /* Static methods */\n  }], [{\n    key: \"_getClassMap\",\n    value: function () {\n      return classMap;\n    }\n  }, {\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.clearAllState();\n    }\n\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAll\",\n    value: function (list /*: Array<ParseObject>*/) {\n      var options /*: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list /*: Array<ParseObject>*/, keys /*: String | Array<string | Array<string>>*/, options /*: RequestOptions*/) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list /*: Array<ParseObject>*/, keys /*: String | Array<string | Array<string>>*/, options /*: RequestOptions*/) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list /*: Array<ParseObject>*/, options) {\n      options = options || {};\n      var queryOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n      if ((0, _isArray.default)(options.include)) {\n        var _context8;\n        (0, _forEach.default)(_context8 = options.include).call(_context8, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n      return include;\n    }\n\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     * array of other Parse.Error objects. Each error object in this array\n     * has an \"object\" property that references the object that could not be\n     * deleted (for instance, because that object could not be found).</li>\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\n     * caused the delete operation to be aborted partway through (for\n     * instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     * Parse.Object.destroyAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were deleted.\n     * }, (error) => {\n     * // An error occurred while deleting one or more of the objects.\n     * // If this is an aggregate error, then we can inspect each error\n     * // object individually to determine the reason why a particular\n     * // object was not deleted.\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     * for (var i = 0; i < error.errors.length; i++) {\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     * \"due to \" + error.errors[i].message);\n     * }\n     * } else {\n     * console.log(\"Delete aborted because of \" + error.message);\n     * }\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\n     * completes.\n     */\n  }, {\n    key: \"destroyAll\",\n    value: function (list /*: Array<ParseObject>*/) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     * Parse.Object.saveAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were saved.\n     * }, (error) => {\n     * // An error occurred while saving one of the objects.\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"saveAll\",\n    value: function (list /*: Array<ParseObject>*/) {\n      var options /*: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {string} id The ID of the object to create a reference to.\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference.\n     */\n  }, {\n    key: \"createWithoutData\",\n    value: function (id /*: string*/) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     *\n     * @param {object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @param {boolean} dirty Whether the Parse.Object should set JSON keys to dirty\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference\n     */\n  }, {\n    key: \"fromJSON\",\n    value: function (json /*: any*/, override /*:: ?: boolean*/, dirty /*:: ?: boolean*/) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor(json.className) : new ParseObject(json.className);\n      var otherAttributes = {};\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n          if (dirty) {\n            o.set(_attr12, json[_attr12]);\n          }\n        }\n      }\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n        var preserved = null;\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n        o._clearServerData();\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n      o._finishFetch(otherAttributes);\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n      return o;\n    }\n\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     *\n     * @param {string} className The class name of the subclass\n     * @param {Function} constructor The subclass\n     */\n  }, {\n    key: \"registerSubclass\",\n    value: function (className /*: string*/, constructor /*: any*/) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n      classMap[className] = constructor;\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n\n    /**\n     * Unegisters a subclass of Parse.Object with a specific class name.\n     *\n     * @param {string} className The class name of the subclass\n     */\n  }, {\n    key: \"unregisterSubclass\",\n    value: function (className /*: string*/) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n      delete classMap[className];\n    }\n\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {string} className The name of the Parse class backing this model.\n     * @param {object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {object} classProps Class properties to add the class returned from\n     *     this method.\n     * @returns {Parse.Object} A new subclass of Parse.Object.\n     */\n  }, {\n    key: \"extend\",\n    value: function (className /*: any*/, protoProps /*: any*/, classProps /*: any*/) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error(\"Parse.Object.extend's first argument should be the className.\");\n        }\n      }\n      var adjustedClassName = className;\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n      var parentProto = ParseObject.prototype;\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      }\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++;\n        // Enable legacy initializers\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n        if (this._initializers) {\n          var _iterator2 = _createForOfIteratorHelper(this._initializers),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var initializer = _step2.value;\n              initializer.apply(this, arguments);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error(\"Can't create an invalid Parse Object\");\n          }\n        }\n      };\n      if (classMap[adjustedClassName]) {\n        ParseObjectSubclass = classMap[adjustedClassName];\n      } else {\n        ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n          if (typeof name === 'string') {\n            return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n          }\n          return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n        };\n        ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n        ParseObjectSubclass.className = adjustedClassName;\n        ParseObjectSubclass.__super__ = parentProto;\n        ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n          constructor: {\n            value: ParseObjectSubclass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n      }\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop === 'initialize') {\n            var _context9;\n            (0, _defineProperty3.default)(ParseObjectSubclass.prototype, '_initializers', {\n              value: (0, _concat.default)(_context9 = []).call(_context9, (0, _toConsumableArray2.default)(ParseObjectSubclass.prototype._initializers || []), [protoProps[prop]]),\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n            continue;\n          }\n          if (prop !== 'className') {\n            (0, _defineProperty3.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty3.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     *\n     * @static\n     */\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     *\n     * @static\n     */\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n  }, {\n    key: \"pinAll\",\n    value: function (objects /*: Array<ParseObject>*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name /*: string*/, objects /*: Array<ParseObject>*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAll\",\n    value: function (objects /*: Array<ParseObject>*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name /*: string*/, objects /*: Array<ParseObject>*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllObjects\",\n    value: function () /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name /*: string*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\nvar DefaultController = {\n  fetch: function (target /*: ParseObject | Array<ParseObject>*/, forceFetch /*: boolean*/, options /*: RequestOptions*/) /*: Promise<Array<void> | ParseObject>*/{\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n        if (!className) {\n          className = el.className;\n        }\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n        results.push(el);\n      });\n      if (error) {\n        return _promise.default.reject(error);\n      }\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n      if (options && options.include) {\n        query.include(options.include);\n      }\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(objects) {\n          var idMap, i, obj, _i, _obj, id, _i2, _results, object;\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) switch (_context10.prev = _context10.next) {\n              case 0:\n                idMap = {};\n                (0, _forEach.default)(objects).call(objects, function (o) {\n                  idMap[o.id] = o;\n                });\n                i = 0;\n              case 3:\n                if (!(i < objs.length)) {\n                  _context10.next = 11;\n                  break;\n                }\n                obj = objs[i];\n                if (!(!obj || !obj.id || !idMap[obj.id])) {\n                  _context10.next = 8;\n                  break;\n                }\n                if (!forceFetch) {\n                  _context10.next = 8;\n                  break;\n                }\n                return _context10.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n              case 8:\n                i++;\n                _context10.next = 3;\n                break;\n              case 11:\n                if (!singleInstance) {\n                  // If single instance objects are disabled, we need to replace the\n                  for (_i = 0; _i < results.length; _i++) {\n                    _obj = results[_i];\n                    if (_obj && _obj.id && idMap[_obj.id]) {\n                      id = _obj.id;\n                      _obj._finishFetch(idMap[id].toJSON());\n                      results[_i] = idMap[id];\n                    }\n                  }\n                }\n                _i2 = 0, _results = results;\n              case 13:\n                if (!(_i2 < _results.length)) {\n                  _context10.next = 20;\n                  break;\n                }\n                object = _results[_i2];\n                _context10.next = 17;\n                return localDatastore._updateObjectIfPinned(object);\n              case 17:\n                _i2++;\n                _context10.next = 13;\n                break;\n              case 20:\n                return _context10.abrupt(\"return\", _promise.default.resolve(results));\n              case 21:\n              case \"end\":\n                return _context10.stop();\n            }\n          }, _callee6);\n        }));\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else if (target instanceof ParseObject) {\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n      var RESTController = _CoreManager.default.getRESTController();\n      var params = {};\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(response) {\n          return _regenerator.default.wrap(function (_context11) {\n            while (1) switch (_context11.prev = _context11.next) {\n              case 0:\n                target._clearPendingOps();\n                target._clearServerData();\n                target._finishFetch(response);\n                _context11.next = 5;\n                return localDatastore._updateObjectIfPinned(target);\n              case 5:\n                return _context11.abrupt(\"return\", target);\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }, _callee7);\n        }));\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n    return _promise.default.resolve();\n  },\n  destroy: function (target /*: ParseObject | Array<ParseObject>*/, options /*: RequestOptions*/) /*: Promise<Array<void> | ParseObject>*/{\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n            localDatastore = _CoreManager.default.getLocalDatastore();\n            RESTController = _CoreManager.default.getRESTController();\n            if (!(0, _isArray.default)(target)) {\n              _context14.next = 15;\n              break;\n            }\n            if (!(target.length < 1)) {\n              _context14.next = 6;\n              break;\n            }\n            return _context14.abrupt(\"return\", _promise.default.resolve([]));\n          case 6:\n            batches = [[]];\n            (0, _forEach.default)(target).call(target, function (obj) {\n              if (!obj.id) {\n                return;\n              }\n              batches[batches.length - 1].push(obj);\n              if (batches[batches.length - 1].length >= batchSize) {\n                batches.push([]);\n              }\n            });\n            if (batches[batches.length - 1].length === 0) {\n              // If the last batch is empty, remove it\n              batches.pop();\n            }\n            deleteCompleted = _promise.default.resolve();\n            errors = [];\n            (0, _forEach.default)(batches).call(batches, function (batch) {\n              deleteCompleted = deleteCompleted.then(function () {\n                return RESTController.request('POST', 'batch', {\n                  requests: (0, _map.default)(batch).call(batch, function (obj) {\n                    return {\n                      method: 'DELETE',\n                      path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                      body: {}\n                    };\n                  })\n                }, options).then(function (results) {\n                  for (var i = 0; i < results.length; i++) {\n                    if (results[i] && results[i].hasOwnProperty('error')) {\n                      var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                      err.object = batch[i];\n                      errors.push(err);\n                    }\n                  }\n                });\n              });\n            });\n            return _context14.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n              var aggregate, _iterator3, _step3, object;\n              return _regenerator.default.wrap(function (_context12) {\n                while (1) switch (_context12.prev = _context12.next) {\n                  case 0:\n                    if (!errors.length) {\n                      _context12.next = 4;\n                      break;\n                    }\n                    aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                    aggregate.errors = errors;\n                    return _context12.abrupt(\"return\", _promise.default.reject(aggregate));\n                  case 4:\n                    _iterator3 = _createForOfIteratorHelper(target);\n                    _context12.prev = 5;\n                    _iterator3.s();\n                  case 7:\n                    if ((_step3 = _iterator3.n()).done) {\n                      _context12.next = 13;\n                      break;\n                    }\n                    object = _step3.value;\n                    _context12.next = 11;\n                    return localDatastore._destroyObjectIfPinned(object);\n                  case 11:\n                    _context12.next = 7;\n                    break;\n                  case 13:\n                    _context12.next = 18;\n                    break;\n                  case 15:\n                    _context12.prev = 15;\n                    _context12.t0 = _context12[\"catch\"](5);\n                    _iterator3.e(_context12.t0);\n                  case 18:\n                    _context12.prev = 18;\n                    _iterator3.f();\n                    return _context12.finish(18);\n                  case 21:\n                    return _context12.abrupt(\"return\", _promise.default.resolve(target));\n                  case 22:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }, _callee8, null, [[5, 15, 18, 21]]);\n            }))));\n          case 15:\n            if (!(target instanceof ParseObject)) {\n              _context14.next = 17;\n              break;\n            }\n            return _context14.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n              return _regenerator.default.wrap(function (_context13) {\n                while (1) switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.next = 2;\n                    return localDatastore._destroyObjectIfPinned(target);\n                  case 2:\n                    return _context13.abrupt(\"return\", _promise.default.resolve(target));\n                  case 3:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }, _callee9);\n            }))));\n          case 17:\n            return _context14.abrupt(\"return\", _promise.default.resolve(target));\n          case 18:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee10);\n    }))();\n  },\n  save: function (target /*: ParseObject | Array<ParseObject | ParseFile>*/, options /*: RequestOptions*/) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n    var mapIdForPin = {};\n    var RESTController = _CoreManager.default.getRESTController();\n    var stateController = _CoreManager.default.getObjectStateController();\n    var allowCustomObjectId = _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n      var unsaved = (0, _concat.default)(target).call(target);\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved /*: Array<ParseFile>*/ = [];\n      var pending /*: Array<ParseObject>*/ = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (allowCustomObjectId && Object.prototype.hasOwnProperty.call(el, 'id') && !el.id) {\n              throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty or null');\n            }\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          }\n\n          // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            var task = function task() {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error);\n                    // Cancel the rest of the save\n                    pending = [];\n                  }\n                  obj._handleSaveError();\n                }\n              });\n            };\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), task));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {\n          var _iterator4, _step4, object;\n          return _regenerator.default.wrap(function _callee11$(_context15) {\n            while (1) switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!objectError) {\n                  _context15.next = 2;\n                  break;\n                }\n                return _context15.abrupt(\"return\", _promise.default.reject(objectError));\n              case 2:\n                _iterator4 = _createForOfIteratorHelper(target);\n                _context15.prev = 3;\n                _iterator4.s();\n              case 5:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context15.next = 14;\n                  break;\n                }\n                object = _step4.value;\n                if (!(object instanceof ParseObject)) {\n                  _context15.next = 12;\n                  break;\n                }\n                _context15.next = 10;\n                return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n              case 10:\n                _context15.next = 12;\n                return localDatastore._updateObjectIfPinned(object);\n              case 12:\n                _context15.next = 5;\n                break;\n              case 14:\n                _context15.next = 19;\n                break;\n              case 16:\n                _context15.prev = 16;\n                _context15.t0 = _context15[\"catch\"](3);\n                _iterator4.e(_context15.t0);\n              case 19:\n                _context15.prev = 19;\n                _iterator4.f();\n                return _context15.finish(19);\n              case 22:\n                return _context15.abrupt(\"return\", _promise.default.resolve(target));\n              case 23:\n              case \"end\":\n                return _context15.stop();\n            }\n          }, _callee11, null, [[3, 16, 19, 22]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      if (allowCustomObjectId && Object.prototype.hasOwnProperty.call(target, 'id') && !target.id) {\n        throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty or null');\n      }\n      // generate _localId in case if cascadeSave=false\n      target._getId();\n      var localId = target._localId;\n      // copying target lets Flow guarantee the pointer isn't modified elsewhere\n      var targetCopy = target;\n      var task = function task() {\n        var params = targetCopy._getSaveParams();\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n          return _promise.default.reject(error);\n        });\n      };\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {\n        return _regenerator.default.wrap(function _callee12$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return localDatastore._updateLocalIdForObject(localId, target);\n            case 2:\n              _context16.next = 4;\n              return localDatastore._updateObjectIfPinned(target);\n            case 4:\n              return _context16.abrupt(\"return\", target);\n            case 5:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee12);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n    return _promise.default.resolve();\n  }\n};\n_CoreManager.default.setObjectController(DefaultController);\nvar _default = ParseObject;\nexports.default = _default;","map":{"version":3,"names":["_typeof3","require","_Object$keys2","_Object$getOwnPropertySymbols","_filterInstanceProperty","_Object$getOwnPropertyDescriptor","_forEachInstanceProperty2","_Object$getOwnPropertyDescriptors","_Object$defineProperties","_Object$defineProperty2","_sliceInstanceProperty","_Array$from","_Symbol","_getIteratorMethod","_Array$isArray2","_WeakMap","_interopRequireDefault","exports","value","default","_regenerator","_toConsumableArray2","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_defineProperty2","_indexOf","_freeze","_keys","_forEach","_stringify","_includes","_getPrototypeOf","_concat","_isArray","_promise","_create","_defineProperty3","_find","_map","_CoreManager","_canBeSerialized","_decode","_encode","_escape2","_EventuallyQueue","_ParseACL","_parseDate","_ParseError","_ParseFile","_promiseUtils","_LocalDatastoreUtils","_ParseOp","_ParseQuery","_ParseRelation","SingleInstanceStateController","_interopRequireWildcard","_unique","UniqueInstanceStateController","_unsavedChildren","_getRequireWildcardCache","nodeInterop","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","key","Object","prototype","hasOwnProperty","call","desc","set","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_context19","_arrayLikeToArray","toString","constructor","name","test","arr","len","arr2","Array","ownKeys","object","enumerableOnly","keys","symbols","sym","enumerable","push","apply","_objectSpread","target","arguments","_context17","_context18","source","uuidv4","classMap","objectCount","singleInstance","setObjectStateController","getServerUrlPath","serverUrl","url","replace","substr","ParseObject","className","attributes","options","initialize","toSet","_objCount","_attr","Error","stateController","getObjectStateController","estimateAttributes","_getStateIdentifier","_getServerData","createdAt","updatedAt","id","_localId","localId","_getId","getServerData","serverData","unset","_attr2","undefined","setServerData","getPendingOps","keysToClear","pending","_getPendingOps","latest","objectCache","getObjectCache","dirty","_attr3","val","json","stringified","seen","offline","toJSON","__type","dirtyObjects","_getDirtyObjectAttributes","attr","isDotNotation","field","fieldName","split","SetOp","method","body","_getSaveJSON","path","objectId","initializeState","decoded","_attr4","_ensureParentAndKey","commitServerChanges","existed","state","getState","serverId","oldState","removeState","response","status","changes","popPendingState","RelationOp","applyTo","UnsetOp","_migrateId","_setExisted","mergeFirstPendingState","seenEntry","attrs","_attr5","_attr6","other","pendingOps","_attr7","_attr8","newOps","readonly","readOnlyAttributes","k","Op","__op","opFromJSON","relation","targetClassName","currentAttributes","newValues","_attr9","ignoreValidation","validation","validate","error","last","_attr10","nextOp","mergeWith","setPendingOp","amount","IncrementOp","item","AddOp","items","AddUniqueOp","RemoveOp","clone","copy","a","duplicateState","_exists","mark","_callee","query","wrap","_context","prev","abrupt","t0","code","OBJECT_NOT_FOUND","stop","exists","ACL","OTHER_CAUSE","_key","INVALID_KEY_NAME","acl","keysToRevert","_len","_key2","_iterator","_step","_key3","_clearPendingOps","erasable","_attr11","fetchOptions","useMasterKey","sessionToken","context","include","_context2","_context3","controller","getObjectController","fetch","_saveEventually","_callee2","_context4","save","message","poll","saveEventually","arg1","arg2","arg3","_this","reject","saveOptions","installationId","unsaved","cascadeSave","then","_destroyEventually","_callee3","_context5","destroy","destroyEventually","destroyOptions","resolve","pinAllWithName","DEFAULT_PIN","unPinAllWithName","_isPinned","_callee4","localDatastore","objectKey","pin","_context6","getLocalDatastore","isEnabled","getKeyForObject","fromPinWithName","sent","isPinned","_fetchFromLocalDatastore","_callee5","pinned","result","_context7","_serializeObject","fromJSON","_finishFetch","fetchFromLocalDatastore","clearAllState","list","queryOptions","handleIncludeOptions","fetchAll","fetchAllIfNeeded","_context8","batchSize","override","otherAttributes","_attr12","preserved","_preserveFieldsOnFetch","_clearServerData","protoProps","classProps","extend","adjustedClassName","parentProto","__super__","ParseObjectSubclass","_initializers","_iterator2","_step2","initializer","createWithoutData","writable","configurable","prop","_context9","_prop","objects","_handlePinAllWithName","_handleUnPinAllWithName","unPinWithName","PIN_PREFIX","DefaultController","forceFetch","objs","ids","results","el","INVALID_CLASS_NAME","MISSING_OBJECT_ID","isDataAvailable","containedIn","_limit","_ref","_callee6","idMap","_i","_obj","_i2","_results","_context10","_updateObjectIfPinned","RESTController","getRESTController","params","join","request","_ref2","_callee7","_context11","_callee10","batches","deleteCompleted","errors","_context14","pop","batch","requests","_callee8","aggregate","_iterator3","_step3","_context12","AGGREGATE_ERROR","_destroyObjectIfPinned","finish","_callee9","_context13","mapIdForPin","allowCustomObjectId","returnStatus","filesSaved","all","objectError","continueWhile","nextPending","batchReturned","resolvingPromise","batchReady","batchTasks","index","ready","task","responses","success","_status","_handleSaveResponse","serverError","_handleSaveError","pushPendingState","enqueueTask","when","_getSaveParams","INCORRECT_TYPE","_callee11","_iterator4","_step4","_callee11$","_context15","_updateLocalIdForObject","targetCopy","_callee12","_callee12$","_context16","setObjectController","_default"],"sources":["/home/mspadafo/compsci/MWD/pogg/node_modules/parse/lib/browser/ParseObject.js"],"sourcesContent":["\"use strict\";\n\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/toConsumableArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\nvar _decode = _interopRequireDefault(require(\"./decode\"));\nvar _encode = _interopRequireDefault(require(\"./encode\"));\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\nvar _EventuallyQueue = _interopRequireDefault(require(\"./EventuallyQueue\"));\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\nvar _promiseUtils = require(\"./promiseUtils\");\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\nvar _ParseOp = require(\"./ParseOp\");\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\nvar _unique = _interopRequireDefault(require(\"./unique\"));\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty2(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function () {};\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context19;\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = _sliceInstanceProperty(_context19 = Object.prototype.toString.call(o)).call(_context19, 8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n      return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var _context17, _context18;\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? _forEachInstanceProperty2(_context17 = ownKeys(Object(source), !0)).call(_context17, function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)) : _forEachInstanceProperty2(_context18 = ownKeys(Object(source))).call(_context18, function (key) {\n      _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n} /**\n   * @flow\n   */\n/*:: import type { AttributeMap, OpsMap } from './ObjectStateMutations';*/\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\nvar uuidv4 = require('./uuid');\n/*:: export type Pointer = {\n  __type: string,\n  className: string,\n  objectId: string,\n};*/\n/*:: type SaveParams = {\n  method: string,\n  path: string,\n  body: AttributeMap,\n};*/\n/*:: export type SaveOptions = FullOptions & {\n  cascadeSave?: boolean,\n  context?: AttributeMap,\n};*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\nvar classMap = {};\n\n// Global counter for generating unique Ids for non-single-instance objects\nvar objectCount = 0;\n// On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n\n/**\n * Creates a new model with defined attributes.\n *\n * <p>You won't normally call this method directly.  It is recommended that\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\n * <code>extend</code>.</p>\n *\n * <p>However, if you don't want to use a subclass, or aren't sure which\n * subclass is appropriate, you can use this form:<pre>\n *     var object = new Parse.Object(\"ClassName\");\n * </pre>\n * That is basically equivalent to:<pre>\n *     var MyClass = Parse.Object.extend(\"ClassName\");\n *     var object = new MyClass();\n * </pre></p>\n *\n * @alias Parse.Object\n */\nvar ParseObject = /*#__PURE__*/function () {\n  /**\n   * @param {string} className The class name for the object\n   * @param {object} attributes The initial set of data to store in the object.\n   * @param {object} options The options for this object instance.\n   */\n  function ParseObject(className /*: ?string | { className: string, [attr: string]: mixed }*/, attributes /*:: ?: { [attr: string]: mixed }*/, options /*:: ?: { ignoreValidation: boolean }*/) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    /**\n     * The ID of this object, unique within its class.\n     *\n     * @property {string} id\n     */\n    (0, _defineProperty2.default)(this, \"id\", void 0);\n    (0, _defineProperty2.default)(this, \"_localId\", void 0);\n    (0, _defineProperty2.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty2.default)(this, \"className\", void 0);\n    // Enable legacy initializers\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n    var toSet = null;\n    this._objCount = objectCount++;\n    if (typeof className === 'string') {\n      this.className = className;\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error(\"Can't create an invalid Parse Object\");\n    }\n  }\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"attributes\",\n    get: /* Prototype getters / setters */\n\n    function () /*: AttributeMap*/{\n      var stateController = _CoreManager.default.getObjectStateController();\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n\n    /**\n     * The first time this object was saved on the server.\n     *\n     * @property {Date} createdAt\n     * @returns {Date}\n     */\n  }, {\n    key: \"createdAt\",\n    get: function () /*: ?Date*/{\n      return this._getServerData().createdAt;\n    }\n\n    /**\n     * The last time this object was updated on the server.\n     *\n     * @property {Date} updatedAt\n     * @returns {Date}\n     */\n  }, {\n    key: \"updatedAt\",\n    get: function () /*: ?Date*/{\n      return this._getServerData().updatedAt;\n    }\n\n    /* Private methods */\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"_getId\",\n    value: function () /*: string*/{\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n      var localId = 'local' + uuidv4();\n      this._localId = localId;\n      return localId;\n    }\n\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     *\n     * @returns {Parse.Object|object}\n     */\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function () /*: ParseObject | { id: string, className: string }*/{\n      if (singleInstance) {\n        var id = this.id;\n        if (!id) {\n          id = this._getId();\n        }\n        return {\n          id: id,\n          className: this.className\n        };\n      } else {\n        return this;\n      }\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function () /*: AttributeMap*/{\n      var stateController = _CoreManager.default.getObjectStateController();\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n      var unset = {};\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function () /*: Array<OpsMap>*/{\n      var stateController = _CoreManager.default.getObjectStateController();\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear /*:: ?: Array<string>*/) {\n      var pending = this._getPendingOps();\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function () /*: AttributeMap*/{\n      var attributes = this.attributes;\n      var stateController = _CoreManager.default.getObjectStateController();\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen /*:: ?: Array<any>*/, offline /*:: ?: boolean*/) /*: AttributeMap*/{\n      var json /*: { [key: string]: mixed }*/ = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function () /*: AttributeMap*/{\n      var pending = this._getPendingOps();\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      var json = {};\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function () /*: SaveParams*/{\n      var method = this.id ? 'PUT' : 'POST';\n      var body = this._getSaveJSON();\n      var path = 'classes/' + this.className;\n      if (_CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID')) {\n        if (!this.createdAt) {\n          method = 'POST';\n          body.objectId = this.id;\n        } else {\n          method = 'PUT';\n          path += '/' + this.id;\n        }\n      } else if (this.id) {\n        path += '/' + this.id;\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData /*: AttributeMap*/) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed /*: boolean*/) {\n      var stateController = _CoreManager.default.getObjectStateController();\n      var state = stateController.getState(this._getStateIdentifier());\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId /*: string*/) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response /*: AttributeMap*/, status /*: number*/) {\n      var changes = {};\n      var stateController = _CoreManager.default.getObjectStateController();\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response)) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n      this._migrateId(response.objectId);\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n  }, {\n    key: \"initialize\",\n    value: /* Public methods */\n\n    function () {\n      // NOOP\n    }\n\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     *\n     * @param seen\n     * @param offline\n     * @returns {object}\n     */\n  }, {\n    key: \"toJSON\",\n    value: function (seen /*: Array<any> | void*/, offline /*:: ?: boolean*/) /*: AttributeMap*/{\n      var seenEntry = this.id ? this.className + ':' + this.id : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n      var pending = this._getPendingOps();\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n      if (this.id) {\n        json.objectId = this.id;\n      }\n      return json;\n    }\n\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     *\n     * @param {object} other - An other object ot compare\n     * @returns {boolean}\n     */\n  }, {\n    key: \"equals\",\n    value: function (other /*: mixed*/) /*: boolean*/{\n      if (this === other) {\n        return true;\n      }\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     *\n     * @param {string} attr An attribute name (optional).\n     * @returns {boolean}\n     */\n  }, {\n    key: \"dirty\",\n    value: function (attr /*:: ?: string*/) /*: boolean*/{\n      if (!this.id) {\n        return true;\n      }\n      var pendingOps = this._getPendingOps();\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     *\n     * @returns {string[]}\n     */\n  }, {\n    key: \"dirtyKeys\",\n    value: function () /*: Array<string>*/{\n      var pendingOps = this._getPendingOps();\n      var keys = {};\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n      var dirtyObjects = this._getDirtyObjectAttributes();\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n      return (0, _keys.default)(keys);\n    }\n\n    /**\n     * Returns true if the object has been fetched.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isDataAvailable\",\n    value: function () /*: boolean*/{\n      var serverData = this._getServerData();\n      return !!(0, _keys.default)(serverData).length;\n    }\n\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n  }, {\n    key: \"toPointer\",\n    value: function () /*: Pointer*/{\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n  }, {\n    key: \"toOfflinePointer\",\n    value: function () /*: Pointer*/{\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n\n    /**\n     * Gets the value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {*}\n     */\n  }, {\n    key: \"get\",\n    value: function (attr /*: string*/) /*: mixed*/{\n      return this.attributes[attr];\n    }\n\n    /**\n     * Gets a relation on the given class for the attribute.\n     *\n     * @param {string} attr The attribute to get the relation for.\n     * @returns {Parse.Relation}\n     */\n  }, {\n    key: \"relation\",\n    value: function (attr /*: string*/) /*: ParseRelation*/{\n      var value = this.get(attr);\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error('Called relation() on non-relation field ' + attr);\n        }\n        value._ensureParentAndKey(this, attr);\n        return value;\n      }\n      return new _ParseRelation.default(this, attr);\n    }\n\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {string}\n     */\n  }, {\n    key: \"escape\",\n    value: function (attr /*: string*/) /*: string*/{\n      var val = this.attributes[attr];\n      if (val == null) {\n        return '';\n      }\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n        val = val.toString();\n      }\n      return (0, _escape2.default)(val);\n    }\n\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     *\n     * @param {string} attr The string name of the attribute.\n     * @returns {boolean}\n     */\n  }, {\n    key: \"has\",\n    value: function (attr /*: string*/) /*: boolean*/{\n      var attributes = this.attributes;\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n      return false;\n    }\n\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {(string|object)} key The key to set.\n     * @param {(string|object)} value The value to give it.\n     * @param {object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n  }, {\n    key: \"set\",\n    value: function (key /*: mixed*/, value /*: mixed*/, options /*:: ?: mixed*/) /*: ParseObject | boolean*/{\n      var changes = {};\n      var newOps = {};\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n      options = options || {};\n      var readonly = [];\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error('Cannot modify readonly attribute: ' + k);\n        }\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n      var currentAttributes = this.attributes;\n\n      // Calculate new values\n      var newValues = {};\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      }\n\n      // Validate changes\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n          return false;\n        }\n      }\n\n      // Consolidate Ops\n      var pendingOps = this._getPendingOps();\n      var last = pendingOps.length - 1;\n      var stateController = _CoreManager.default.getObjectStateController();\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n      return this;\n    }\n\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @param options\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"unset\",\n    value: function (attr /*: string*/, options /*:: ?: { [opt: string]: mixed }*/) /*: ParseObject | boolean*/{\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @returns {(ParseObject|boolean)}\n     */\n  }, {\n    key: \"increment\",\n    value: function (attr /*: string*/, amount /*:: ?: number*/) /*: ParseObject | boolean*/{\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n\n    /**\n     * Atomically decrements the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to decrement by (optional).\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"decrement\",\n    value: function (attr /*: string*/, amount /*:: ?: number*/) /*: ParseObject | boolean*/{\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"add\",\n    value: function (attr /*: string*/, item /*: mixed*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addAll\",\n    value: function (attr /*: string*/, items /*: Array<mixed>*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addUnique\",\n    value: function (attr /*: string*/, item /*: mixed*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr /*: string*/, items /*: Array<mixed>*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"remove\",\n    value: function (attr /*: string*/, item /*: mixed*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"removeAll\",\n    value: function (attr /*: string*/, items /*: Array<mixed>*/) /*: ParseObject | boolean*/{\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op | undefined} The operation, or undefined if none.\n     */\n  }, {\n    key: \"op\",\n    value: function (attr /*: string*/) /*: ?Op*/{\n      var pending = this._getPendingOps();\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n\n    /**\n     * Creates a new model with identical attributes to this one.\n     *\n     * @returns {Parse.Object}\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() /*: any*/{\n      var clone = new this.constructor(this.className);\n      var attributes = this.attributes;\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || [];\n        // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n        var copy = {};\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n        attributes = copy;\n      }\n      if (clone.set) {\n        clone.set(attributes);\n      }\n      return clone;\n    }\n\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     *\n     * @returns {Parse.Object}\n     */\n  }, {\n    key: \"newInstance\",\n    value: function () /*: any*/{\n      var clone = new this.constructor(this.className);\n      clone.id = this.id;\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n      return clone;\n    }\n\n    /**\n     * Returns true if this object has never been saved to Parse.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isNew\",\n    value: function () /*: boolean*/{\n      return !this.id;\n    }\n\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"existed\",\n    value: function () /*: boolean*/{\n      if (!this.id) {\n        return false;\n      }\n      var stateController = _CoreManager.default.getObjectStateController();\n      var state = stateController.getState(this._getStateIdentifier());\n      if (state) {\n        return state.existed;\n      }\n      return false;\n    }\n\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options /*:: ?: RequestOptions*/) {\n        var query;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (this.id) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 2:\n              _context.prev = 2;\n              query = new _ParseQuery.default(this.className);\n              _context.next = 6;\n              return query.get(this.id, options);\n            case 6:\n              return _context.abrupt(\"return\", true);\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](2);\n              if (!(_context.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                _context.next = 13;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 13:\n              throw _context.t0;\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n      function exists() {\n        return _exists.apply(this, arguments);\n      }\n      return exists;\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     *\n     * @returns {boolean}\n     */\n  }, {\n    key: \"isValid\",\n    value: function () /*: boolean*/{\n      return !this.validate(this.attributes);\n    }\n\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {object} attrs The current data to validate.\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n  }, {\n    key: \"validate\",\n    value: function (attrs /*: AttributeMap*/) /*: ParseError | boolean*/{\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Returns the ACL for this object.\n     *\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n  }, {\n    key: \"getACL\",\n    value: function () /*: ?ParseACL*/{\n      var acl = this.get('ACL');\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n      return null;\n    }\n\n    /**\n     * Sets the ACL to be used for this object.\n     *\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {object} options\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n  }, {\n    key: \"setACL\",\n    value: function (acl /*: ParseACL*/, options /*:: ?: mixed*/) /*: ParseObject | boolean*/{\n      return this.set('ACL', acl, options);\n    }\n\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     *\n     * @param {string} [keys] - specify which fields to revert\n     */\n  }, {\n    key: \"revert\",\n    value: function () /*: void*/{\n      var keysToRevert;\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n      if (keys.length) {\n        keysToRevert = [];\n        var _iterator = _createForOfIteratorHelper(keys),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n            if (typeof _key3 === 'string') {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      this._clearPendingOps(keysToRevert);\n    }\n\n    /**\n     * Clears all attributes on a model\n     *\n     * @returns {(ParseObject | boolean)}\n     */\n  }, {\n    key: \"clear\",\n    value: function () /*: ParseObject | boolean*/{\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n  }, {\n    key: \"fetch\",\n    value: function (options /*: RequestOptions*/) /*: Promise*/{\n      options = options || {};\n      var fetchOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n        if ((0, _isArray.default)(options.include)) {\n          var _context2;\n          (0, _forEach.default)(_context2 = options.include).call(_context2, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context3;\n              fetchOptions.include = (0, _concat.default)(_context3 = fetchOptions.include).call(_context3, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n      var controller = _CoreManager.default.getObjectController();\n      return controller.fetch(this, true, fetchOptions);\n    }\n\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys /*: String | Array<string | Array<string>>*/, options /*: RequestOptions*/) /*: Promise*/{\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n\n    /**\n     * Saves this object to the server at some unspecified time in the future,\n     * even if Parse is currently inaccessible.\n     *\n     * Use this when you may not have a solid network connection, and don't need to know when the save completes.\n     * If there is some problem with the object such that it can't be saved, it will be silently discarded.\n     *\n     * Objects saved with this method will be stored locally in an on-disk cache until they can be delivered to Parse.\n     * They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection is\n     * available. Objects saved this way will persist even after the app is closed, in which case they will be sent the\n     * next time the app is opened.\n     *\n     * @param {object} [options]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n  }, {\n    key: \"saveEventually\",\n    value: function () {\n      var _saveEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2(options /*: SaveOptions*/) {\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _context4.next = 3;\n              return this.save(null, options);\n            case 3:\n              _context4.next = 11;\n              break;\n            case 5:\n              _context4.prev = 5;\n              _context4.t0 = _context4[\"catch\"](0);\n              if (!(_context4.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                _context4.next = 11;\n                break;\n              }\n              _context4.next = 10;\n              return _EventuallyQueue.default.save(this, options);\n            case 10:\n              _EventuallyQueue.default.poll();\n            case 11:\n              return _context4.abrupt(\"return\", this);\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n      function saveEventually() {\n        return _saveEventually.apply(this, arguments);\n      }\n      return saveEventually;\n    }()\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     * object.save();</pre>\n     * or<pre>\n     * object.save(attrs);</pre>\n     * or<pre>\n     * object.save(null, options);</pre>\n     * or<pre>\n     * object.save(attrs, options);</pre>\n     * or<pre>\n     * object.save(key, value);</pre>\n     * or<pre>\n     * object.save(key, value, options);</pre>\n     *\n     * Example 1: <pre>\n     * gameTurn.save({\n     * player: \"Jake Cutter\",\n     * diceRoll: 2\n     * }).then(function(gameTurnAgain) {\n     * // The save was successful.\n     * }, function(error) {\n     * // The save failed.  Error is an instance of Parse.Error.\n     * });</pre>\n     *\n     * Example 2: <pre>\n     * gameTurn.save(\"player\", \"Jake Cutter\");</pre>\n     *\n     * @param {string | object | null} [arg1]\n     * Valid options are:<ul>\n     * <li>`Object` - Key/value pairs to update on the object.</li>\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     * @param {string | object} [arg2]\n     * <ul>\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     * <li>`Object` Options - Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * </li>\n     * </ul>\n     * @param {object} [arg3]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n  }, {\n    key: \"save\",\n    value: function (arg1 /*: ?string | { [attr: string]: mixed }*/, arg2 /*: SaveOptions | mixed*/, arg3 /*:: ?: SaveOptions*/) /*: Promise*/{\n      var _this = this;\n      var attrs;\n      var options;\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n      if (attrs) {\n        var validation = this.validate(attrs);\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n        this.set(attrs, options);\n      }\n      options = options || {};\n      var saveOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n      var controller = _CoreManager.default.getObjectController();\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n\n    /**\n     * Deletes this object from the server at some unspecified time in the future,\n     * even if Parse is currently inaccessible.\n     *\n     * Use this when you may not have a solid network connection,\n     * and don't need to know when the delete completes. If there is some problem with the object\n     * such that it can't be deleted, the request will be silently discarded.\n     *\n     * Delete instructions made with this method will be stored locally in an on-disk cache until they can be transmitted\n     * to Parse. They will be sent immediately if possible. Otherwise, they will be sent the next time a network connection\n     * is available. Delete requests will persist even after the app is closed, in which case they will be sent the\n     * next time the app is opened.\n     *\n     * @param {object} [options]\n     * Valid options are:<ul>\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n  }, {\n    key: \"destroyEventually\",\n    value: function () {\n      var _destroyEventually = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3(options /*: RequestOptions*/) {\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.prev = 0;\n              _context5.next = 3;\n              return this.destroy(options);\n            case 3:\n              _context5.next = 11;\n              break;\n            case 5:\n              _context5.prev = 5;\n              _context5.t0 = _context5[\"catch\"](0);\n              if (!(_context5.t0.message === 'XMLHttpRequest failed: \"Unable to connect to the Parse API\"')) {\n                _context5.next = 11;\n                break;\n              }\n              _context5.next = 10;\n              return _EventuallyQueue.default.destroy(this, options);\n            case 10:\n              _EventuallyQueue.default.poll();\n            case 11:\n              return _context5.abrupt(\"return\", this);\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n      function destroyEventually() {\n        return _destroyEventually.apply(this, arguments);\n      }\n      return destroyEventually;\n    }()\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n  }, {\n    key: \"destroy\",\n    value: function (options /*: RequestOptions*/) /*: Promise*/{\n      options = options || {};\n      var destroyOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n  }, {\n    key: \"pin\",\n    value: function () /*: Promise<void>*/{\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n  }, {\n    key: \"unPin\",\n    value: function () /*: Promise<void>*/{\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              if (localDatastore.isEnabled) {\n                _context6.next = 3;\n                break;\n              }\n              return _context6.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n            case 3:\n              objectKey = localDatastore.getKeyForObject(this);\n              _context6.next = 6;\n              return localDatastore.fromPinWithName(objectKey);\n            case 6:\n              pin = _context6.sent;\n              return _context6.abrupt(\"return\", pin.length > 0);\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee4, this);\n      }));\n      function isPinned() {\n        return _isPinned.apply(this, arguments);\n      }\n      return isPinned;\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n  }, {\n    key: \"pinWithName\",\n    value: function (name /*: string*/) /*: Promise<void>*/{\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n  }, {\n    key: \"unPinWithName\",\n    value: function (name /*: string*/) /*: Promise<void>*/{\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\n     */\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              if (localDatastore.isEnabled) {\n                _context7.next = 3;\n                break;\n              }\n              throw new Error('Parse.enableLocalDatastore() must be called first');\n            case 3:\n              objectKey = localDatastore.getKeyForObject(this);\n              _context7.next = 6;\n              return localDatastore._serializeObject(objectKey);\n            case 6:\n              pinned = _context7.sent;\n              if (pinned) {\n                _context7.next = 9;\n                break;\n              }\n              throw new Error('Cannot fetch an unsaved ParseObject');\n            case 9:\n              result = ParseObject.fromJSON(pinned);\n              this._finishFetch(result.toJSON());\n              return _context7.abrupt(\"return\", this);\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee5, this);\n      }));\n      function fetchFromLocalDatastore() {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      }\n      return fetchFromLocalDatastore;\n    }() /* Static methods */\n  }], [{\n    key: \"_getClassMap\",\n    value: function () {\n      return classMap;\n    }\n  }, {\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n      stateController.clearAllState();\n    }\n\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAll\",\n    value: function (list /*: Array<ParseObject>*/) {\n      var options /*: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list /*: Array<ParseObject>*/, keys /*: String | Array<string | Array<string>>*/, options /*: RequestOptions*/) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list /*: Array<ParseObject>*/, keys /*: String | Array<string | Array<string>>*/, options /*: RequestOptions*/) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list /*: Array<ParseObject>*/, options) {\n      options = options || {};\n      var queryOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n      if ((0, _isArray.default)(options.include)) {\n        var _context8;\n        (0, _forEach.default)(_context8 = options.include).call(_context8, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n      return include;\n    }\n\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     * array of other Parse.Error objects. Each error object in this array\n     * has an \"object\" property that references the object that could not be\n     * deleted (for instance, because that object could not be found).</li>\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\n     * caused the delete operation to be aborted partway through (for\n     * instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     * Parse.Object.destroyAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were deleted.\n     * }, (error) => {\n     * // An error occurred while deleting one or more of the objects.\n     * // If this is an aggregate error, then we can inspect each error\n     * // object individually to determine the reason why a particular\n     * // object was not deleted.\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     * for (var i = 0; i < error.errors.length; i++) {\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     * \"due to \" + error.errors[i].message);\n     * }\n     * } else {\n     * console.log(\"Delete aborted because of \" + error.message);\n     * }\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\n     * completes.\n     */\n  }, {\n    key: \"destroyAll\",\n    value: function (list /*: Array<ParseObject>*/) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     * Parse.Object.saveAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were saved.\n     * }, (error) => {\n     * // An error occurred while saving one of the objects.\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n  }, {\n    key: \"saveAll\",\n    value: function (list /*: Array<ParseObject>*/) {\n      var options /*: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {string} id The ID of the object to create a reference to.\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference.\n     */\n  }, {\n    key: \"createWithoutData\",\n    value: function (id /*: string*/) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     *\n     * @param {object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @param {boolean} dirty Whether the Parse.Object should set JSON keys to dirty\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference\n     */\n  }, {\n    key: \"fromJSON\",\n    value: function (json /*: any*/, override /*:: ?: boolean*/, dirty /*:: ?: boolean*/) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor(json.className) : new ParseObject(json.className);\n      var otherAttributes = {};\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n          if (dirty) {\n            o.set(_attr12, json[_attr12]);\n          }\n        }\n      }\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n        var preserved = null;\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n        o._clearServerData();\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n      o._finishFetch(otherAttributes);\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n      return o;\n    }\n\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     *\n     * @param {string} className The class name of the subclass\n     * @param {Function} constructor The subclass\n     */\n  }, {\n    key: \"registerSubclass\",\n    value: function (className /*: string*/, constructor /*: any*/) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n      classMap[className] = constructor;\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n\n    /**\n     * Unegisters a subclass of Parse.Object with a specific class name.\n     *\n     * @param {string} className The class name of the subclass\n     */\n  }, {\n    key: \"unregisterSubclass\",\n    value: function (className /*: string*/) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n      delete classMap[className];\n    }\n\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {string} className The name of the Parse class backing this model.\n     * @param {object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {object} classProps Class properties to add the class returned from\n     *     this method.\n     * @returns {Parse.Object} A new subclass of Parse.Object.\n     */\n  }, {\n    key: \"extend\",\n    value: function (className /*: any*/, protoProps /*: any*/, classProps /*: any*/) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        } else {\n          throw new Error(\"Parse.Object.extend's first argument should be the className.\");\n        }\n      }\n      var adjustedClassName = className;\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n      var parentProto = ParseObject.prototype;\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      }\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++;\n        // Enable legacy initializers\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n        if (this._initializers) {\n          var _iterator2 = _createForOfIteratorHelper(this._initializers),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var initializer = _step2.value;\n              initializer.apply(this, arguments);\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error(\"Can't create an invalid Parse Object\");\n          }\n        }\n      };\n      if (classMap[adjustedClassName]) {\n        ParseObjectSubclass = classMap[adjustedClassName];\n      } else {\n        ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n          if (typeof name === 'string') {\n            return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n          }\n          return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n        };\n        ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n        ParseObjectSubclass.className = adjustedClassName;\n        ParseObjectSubclass.__super__ = parentProto;\n        ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n          constructor: {\n            value: ParseObjectSubclass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n      }\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop === 'initialize') {\n            var _context9;\n            (0, _defineProperty3.default)(ParseObjectSubclass.prototype, '_initializers', {\n              value: (0, _concat.default)(_context9 = []).call(_context9, (0, _toConsumableArray2.default)(ParseObjectSubclass.prototype._initializers || []), [protoProps[prop]]),\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n            continue;\n          }\n          if (prop !== 'className') {\n            (0, _defineProperty3.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty3.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     *\n     * @static\n     */\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     *\n     * @static\n     */\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n  }, {\n    key: \"pinAll\",\n    value: function (objects /*: Array<ParseObject>*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name /*: string*/, objects /*: Array<ParseObject>*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAll\",\n    value: function (objects /*: Array<ParseObject>*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name /*: string*/, objects /*: Array<ParseObject>*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllObjects\",\n    value: function () /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name /*: string*/) /*: Promise<void>*/{\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\nvar DefaultController = {\n  fetch: function (target /*: ParseObject | Array<ParseObject>*/, forceFetch /*: boolean*/, options /*: RequestOptions*/) /*: Promise<Array<void> | ParseObject>*/{\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n        if (!className) {\n          className = el.className;\n        }\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n        results.push(el);\n      });\n      if (error) {\n        return _promise.default.reject(error);\n      }\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n      if (options && options.include) {\n        query.include(options.include);\n      }\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6(objects) {\n          var idMap, i, obj, _i, _obj, id, _i2, _results, object;\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) switch (_context10.prev = _context10.next) {\n              case 0:\n                idMap = {};\n                (0, _forEach.default)(objects).call(objects, function (o) {\n                  idMap[o.id] = o;\n                });\n                i = 0;\n              case 3:\n                if (!(i < objs.length)) {\n                  _context10.next = 11;\n                  break;\n                }\n                obj = objs[i];\n                if (!(!obj || !obj.id || !idMap[obj.id])) {\n                  _context10.next = 8;\n                  break;\n                }\n                if (!forceFetch) {\n                  _context10.next = 8;\n                  break;\n                }\n                return _context10.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n              case 8:\n                i++;\n                _context10.next = 3;\n                break;\n              case 11:\n                if (!singleInstance) {\n                  // If single instance objects are disabled, we need to replace the\n                  for (_i = 0; _i < results.length; _i++) {\n                    _obj = results[_i];\n                    if (_obj && _obj.id && idMap[_obj.id]) {\n                      id = _obj.id;\n                      _obj._finishFetch(idMap[id].toJSON());\n                      results[_i] = idMap[id];\n                    }\n                  }\n                }\n                _i2 = 0, _results = results;\n              case 13:\n                if (!(_i2 < _results.length)) {\n                  _context10.next = 20;\n                  break;\n                }\n                object = _results[_i2];\n                _context10.next = 17;\n                return localDatastore._updateObjectIfPinned(object);\n              case 17:\n                _i2++;\n                _context10.next = 13;\n                break;\n              case 20:\n                return _context10.abrupt(\"return\", _promise.default.resolve(results));\n              case 21:\n              case \"end\":\n                return _context10.stop();\n            }\n          }, _callee6);\n        }));\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else if (target instanceof ParseObject) {\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n      var RESTController = _CoreManager.default.getRESTController();\n      var params = {};\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n      return RESTController.request('GET', 'classes/' + target.className + '/' + target._getId(), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7(response) {\n          return _regenerator.default.wrap(function (_context11) {\n            while (1) switch (_context11.prev = _context11.next) {\n              case 0:\n                target._clearPendingOps();\n                target._clearServerData();\n                target._finishFetch(response);\n                _context11.next = 5;\n                return localDatastore._updateObjectIfPinned(target);\n              case 5:\n                return _context11.abrupt(\"return\", target);\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }, _callee7);\n        }));\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n    return _promise.default.resolve();\n  },\n  destroy: function (target /*: ParseObject | Array<ParseObject>*/, options /*: RequestOptions*/) /*: Promise<Array<void> | ParseObject>*/{\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors;\n      return _regenerator.default.wrap(function (_context14) {\n        while (1) switch (_context14.prev = _context14.next) {\n          case 0:\n            batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n            localDatastore = _CoreManager.default.getLocalDatastore();\n            RESTController = _CoreManager.default.getRESTController();\n            if (!(0, _isArray.default)(target)) {\n              _context14.next = 15;\n              break;\n            }\n            if (!(target.length < 1)) {\n              _context14.next = 6;\n              break;\n            }\n            return _context14.abrupt(\"return\", _promise.default.resolve([]));\n          case 6:\n            batches = [[]];\n            (0, _forEach.default)(target).call(target, function (obj) {\n              if (!obj.id) {\n                return;\n              }\n              batches[batches.length - 1].push(obj);\n              if (batches[batches.length - 1].length >= batchSize) {\n                batches.push([]);\n              }\n            });\n            if (batches[batches.length - 1].length === 0) {\n              // If the last batch is empty, remove it\n              batches.pop();\n            }\n            deleteCompleted = _promise.default.resolve();\n            errors = [];\n            (0, _forEach.default)(batches).call(batches, function (batch) {\n              deleteCompleted = deleteCompleted.then(function () {\n                return RESTController.request('POST', 'batch', {\n                  requests: (0, _map.default)(batch).call(batch, function (obj) {\n                    return {\n                      method: 'DELETE',\n                      path: getServerUrlPath() + 'classes/' + obj.className + '/' + obj._getId(),\n                      body: {}\n                    };\n                  })\n                }, options).then(function (results) {\n                  for (var i = 0; i < results.length; i++) {\n                    if (results[i] && results[i].hasOwnProperty('error')) {\n                      var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                      err.object = batch[i];\n                      errors.push(err);\n                    }\n                  }\n                });\n              });\n            });\n            return _context14.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n              var aggregate, _iterator3, _step3, object;\n              return _regenerator.default.wrap(function (_context12) {\n                while (1) switch (_context12.prev = _context12.next) {\n                  case 0:\n                    if (!errors.length) {\n                      _context12.next = 4;\n                      break;\n                    }\n                    aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                    aggregate.errors = errors;\n                    return _context12.abrupt(\"return\", _promise.default.reject(aggregate));\n                  case 4:\n                    _iterator3 = _createForOfIteratorHelper(target);\n                    _context12.prev = 5;\n                    _iterator3.s();\n                  case 7:\n                    if ((_step3 = _iterator3.n()).done) {\n                      _context12.next = 13;\n                      break;\n                    }\n                    object = _step3.value;\n                    _context12.next = 11;\n                    return localDatastore._destroyObjectIfPinned(object);\n                  case 11:\n                    _context12.next = 7;\n                    break;\n                  case 13:\n                    _context12.next = 18;\n                    break;\n                  case 15:\n                    _context12.prev = 15;\n                    _context12.t0 = _context12[\"catch\"](5);\n                    _iterator3.e(_context12.t0);\n                  case 18:\n                    _context12.prev = 18;\n                    _iterator3.f();\n                    return _context12.finish(18);\n                  case 21:\n                    return _context12.abrupt(\"return\", _promise.default.resolve(target));\n                  case 22:\n                  case \"end\":\n                    return _context12.stop();\n                }\n              }, _callee8, null, [[5, 15, 18, 21]]);\n            }))));\n          case 15:\n            if (!(target instanceof ParseObject)) {\n              _context14.next = 17;\n              break;\n            }\n            return _context14.abrupt(\"return\", RESTController.request('DELETE', 'classes/' + target.className + '/' + target._getId(), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n              return _regenerator.default.wrap(function (_context13) {\n                while (1) switch (_context13.prev = _context13.next) {\n                  case 0:\n                    _context13.next = 2;\n                    return localDatastore._destroyObjectIfPinned(target);\n                  case 2:\n                    return _context13.abrupt(\"return\", _promise.default.resolve(target));\n                  case 3:\n                  case \"end\":\n                    return _context13.stop();\n                }\n              }, _callee9);\n            }))));\n          case 17:\n            return _context14.abrupt(\"return\", _promise.default.resolve(target));\n          case 18:\n          case \"end\":\n            return _context14.stop();\n        }\n      }, _callee10);\n    }))();\n  },\n  save: function (target /*: ParseObject | Array<ParseObject | ParseFile>*/, options /*: RequestOptions*/) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n    var mapIdForPin = {};\n    var RESTController = _CoreManager.default.getRESTController();\n    var stateController = _CoreManager.default.getObjectStateController();\n    var allowCustomObjectId = _CoreManager.default.get('ALLOW_CUSTOM_OBJECT_ID');\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n      var unsaved = (0, _concat.default)(target).call(target);\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved /*: Array<ParseFile>*/ = [];\n      var pending /*: Array<ParseObject>*/ = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (allowCustomObjectId && Object.prototype.hasOwnProperty.call(el, 'id') && !el.id) {\n              throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty or null');\n            }\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          }\n\n          // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            var task = function task() {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error);\n                    // Cancel the rest of the save\n                    pending = [];\n                  }\n                  obj._handleSaveError();\n                }\n              });\n            };\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), task));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee11() {\n          var _iterator4, _step4, object;\n          return _regenerator.default.wrap(function _callee11$(_context15) {\n            while (1) switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!objectError) {\n                  _context15.next = 2;\n                  break;\n                }\n                return _context15.abrupt(\"return\", _promise.default.reject(objectError));\n              case 2:\n                _iterator4 = _createForOfIteratorHelper(target);\n                _context15.prev = 3;\n                _iterator4.s();\n              case 5:\n                if ((_step4 = _iterator4.n()).done) {\n                  _context15.next = 14;\n                  break;\n                }\n                object = _step4.value;\n                if (!(object instanceof ParseObject)) {\n                  _context15.next = 12;\n                  break;\n                }\n                _context15.next = 10;\n                return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n              case 10:\n                _context15.next = 12;\n                return localDatastore._updateObjectIfPinned(object);\n              case 12:\n                _context15.next = 5;\n                break;\n              case 14:\n                _context15.next = 19;\n                break;\n              case 16:\n                _context15.prev = 16;\n                _context15.t0 = _context15[\"catch\"](3);\n                _iterator4.e(_context15.t0);\n              case 19:\n                _context15.prev = 19;\n                _iterator4.f();\n                return _context15.finish(19);\n              case 22:\n                return _context15.abrupt(\"return\", _promise.default.resolve(target));\n              case 23:\n              case \"end\":\n                return _context15.stop();\n            }\n          }, _callee11, null, [[3, 16, 19, 22]]);\n        })));\n      });\n    } else if (target instanceof ParseObject) {\n      if (allowCustomObjectId && Object.prototype.hasOwnProperty.call(target, 'id') && !target.id) {\n        throw new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'objectId must not be empty or null');\n      }\n      // generate _localId in case if cascadeSave=false\n      target._getId();\n      var localId = target._localId;\n      // copying target lets Flow guarantee the pointer isn't modified elsewhere\n      var targetCopy = target;\n      var task = function task() {\n        var params = targetCopy._getSaveParams();\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n          return _promise.default.reject(error);\n        });\n      };\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee12() {\n        return _regenerator.default.wrap(function _callee12$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return localDatastore._updateLocalIdForObject(localId, target);\n            case 2:\n              _context16.next = 4;\n              return localDatastore._updateObjectIfPinned(target);\n            case 4:\n              return _context16.abrupt(\"return\", target);\n            case 5:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee12);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n    return _promise.default.resolve();\n  }\n};\n_CoreManager.default.setObjectController(DefaultController);\nvar _default = ParseObject;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}