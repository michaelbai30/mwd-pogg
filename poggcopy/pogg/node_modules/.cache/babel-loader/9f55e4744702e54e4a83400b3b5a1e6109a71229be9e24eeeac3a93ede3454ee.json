{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} /**\n   * @flow\n   */\n/*:: import type { AttributeMap } from './ObjectStateMutations';*/\n/*:: import type ParseRelation from './ParseRelation';*/\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n *\n * @alias Parse.Role\n * @augments Parse.Object\n */\nvar ParseRole = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n  var _super = _createSuper(ParseRole);\n  /**\n   * @param {string} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n  function ParseRole(name /*: string*/, acl /*: ParseACL*/) {\n    var _this;\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = _super.call(this, '_Role');\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n      _this.setACL(acl);\n    }\n    return _this;\n  }\n\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n   * @returns {string} the name of the role.\n   */\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function () /*: ?string*/{\n      var name = this.get('name');\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n      return '';\n    }\n\n    /**\n     * Sets the name for a role. This value must be set before the role has\n     * been saved to the server, and cannot be set once the role has been\n     * saved.\n     *\n     * <p>\n     *   A role's name can only contain alphanumeric characters, _, -, and\n     *   spaces.\n     * </p>\n     *\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\n     *\n     * @param {string} name The name of the role.\n     * @param {object} options Standard options object with success and error\n     *     callbacks.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n  }, {\n    key: \"setName\",\n    value: function (name /*: string*/, options /*:: ?: mixed*/) /*: ParseObject | boolean*/{\n      this._validateName(name);\n      return this.set('name', name, options);\n    }\n\n    /**\n     * Gets the Parse.Relation for the Parse.Users that are direct\n     * children of this role. These users are granted any privileges that this\n     * role has been granted (e.g. read or write access through ACLs). You can\n     * add or remove users from the role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\n     *\n     * @returns {Parse.Relation} the relation for the users belonging to this\n     *     role.\n     */\n  }, {\n    key: \"getUsers\",\n    value: function () /*: ParseRelation*/{\n      return this.relation('users');\n    }\n\n    /**\n     * Gets the Parse.Relation for the Parse.Roles that are direct\n     * children of this role. These roles' users are granted any privileges that\n     * this role has been granted (e.g. read or write access through ACLs). You\n     * can add or remove child roles from this role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\n     *\n     * @returns {Parse.Relation} the relation for the roles belonging to this\n     *     role.\n     */\n  }, {\n    key: \"getRoles\",\n    value: function () /*: ParseRelation*/{\n      return this.relation('roles');\n    }\n  }, {\n    key: \"_validateName\",\n    value: function (newName) {\n      if (typeof newName !== 'string') {\n        throw new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\n      }\n      if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n        throw new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, \" + '-, and spaces.');\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function (attrs /*: AttributeMap*/, options /*:: ?: mixed*/) /*: ParseError | boolean*/{\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n      if (isInvalid) {\n        return isInvalid;\n      }\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n        }\n        try {\n          this._validateName(newName);\n        } catch (e) {\n          return e;\n        }\n      }\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\nvar _default = ParseRole;\nexports.default = _default;","map":{"version":3,"names":["_Reflect$construct","require","_Object$defineProperty","_interopRequireDefault","exports","value","default","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_ParseACL","_ParseError","_ParseObject2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","ParseRole","_ParseObject","_super","name","acl","_this","setName","setACL","key","get","options","_validateName","set","relation","newName","OTHER_CAUSE","test","attrs","isInvalid","getName","id","objectId","registerSubclass","_default"],"sources":["/home/mspadafo/compsci/MWD/pogg/node_modules/parse/lib/browser/ParseRole.js"],"sourcesContent":["\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} /**\n   * @flow\n   */\n/*:: import type { AttributeMap } from './ObjectStateMutations';*/\n/*:: import type ParseRelation from './ParseRelation';*/\n/**\n * Represents a Role on the Parse server. Roles represent groupings of\n * Users for the purposes of granting permissions (e.g. specifying an ACL\n * for an Object). Roles are specified by their sets of child users and\n * child roles, all of which are granted any permissions that the parent\n * role has.\n *\n * <p>Roles must have a name (which cannot be changed after creation of the\n * role), and must specify an ACL.</p>\n *\n * @alias Parse.Role\n * @augments Parse.Object\n */\nvar ParseRole = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseRole, _ParseObject);\n  var _super = _createSuper(ParseRole);\n  /**\n   * @param {string} name The name of the Role to create.\n   * @param {Parse.ACL} acl The ACL for this role. Roles must have an ACL.\n   * A Parse.Role is a local representation of a role persisted to the Parse\n   * cloud.\n   */\n  function ParseRole(name /*: string*/, acl /*: ParseACL*/) {\n    var _this;\n    (0, _classCallCheck2.default)(this, ParseRole);\n    _this = _super.call(this, '_Role');\n    if (typeof name === 'string' && acl instanceof _ParseACL.default) {\n      _this.setName(name);\n      _this.setACL(acl);\n    }\n    return _this;\n  }\n\n  /**\n   * Gets the name of the role.  You can alternatively call role.get(\"name\")\n   *\n   * @returns {string} the name of the role.\n   */\n  (0, _createClass2.default)(ParseRole, [{\n    key: \"getName\",\n    value: function () /*: ?string*/{\n      var name = this.get('name');\n      if (name == null || typeof name === 'string') {\n        return name;\n      }\n      return '';\n    }\n\n    /**\n     * Sets the name for a role. This value must be set before the role has\n     * been saved to the server, and cannot be set once the role has been\n     * saved.\n     *\n     * <p>\n     *   A role's name can only contain alphanumeric characters, _, -, and\n     *   spaces.\n     * </p>\n     *\n     * <p>This is equivalent to calling role.set(\"name\", name)</p>\n     *\n     * @param {string} name The name of the role.\n     * @param {object} options Standard options object with success and error\n     *     callbacks.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n  }, {\n    key: \"setName\",\n    value: function (name /*: string*/, options /*:: ?: mixed*/) /*: ParseObject | boolean*/{\n      this._validateName(name);\n      return this.set('name', name, options);\n    }\n\n    /**\n     * Gets the Parse.Relation for the Parse.Users that are direct\n     * children of this role. These users are granted any privileges that this\n     * role has been granted (e.g. read or write access through ACLs). You can\n     * add or remove users from the role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"users\")</p>\n     *\n     * @returns {Parse.Relation} the relation for the users belonging to this\n     *     role.\n     */\n  }, {\n    key: \"getUsers\",\n    value: function () /*: ParseRelation*/{\n      return this.relation('users');\n    }\n\n    /**\n     * Gets the Parse.Relation for the Parse.Roles that are direct\n     * children of this role. These roles' users are granted any privileges that\n     * this role has been granted (e.g. read or write access through ACLs). You\n     * can add or remove child roles from this role through this relation.\n     *\n     * <p>This is equivalent to calling role.relation(\"roles\")</p>\n     *\n     * @returns {Parse.Relation} the relation for the roles belonging to this\n     *     role.\n     */\n  }, {\n    key: \"getRoles\",\n    value: function () /*: ParseRelation*/{\n      return this.relation('roles');\n    }\n  }, {\n    key: \"_validateName\",\n    value: function (newName) {\n      if (typeof newName !== 'string') {\n        throw new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name must be a String.\");\n      }\n      if (!/^[0-9a-zA-Z\\-_ ]+$/.test(newName)) {\n        throw new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can be only contain alphanumeric characters, _, \" + '-, and spaces.');\n      }\n    }\n  }, {\n    key: \"validate\",\n    value: function (attrs /*: AttributeMap*/, options /*:: ?: mixed*/) /*: ParseError | boolean*/{\n      var isInvalid = (0, _get2.default)((0, _getPrototypeOf2.default)(ParseRole.prototype), \"validate\", this).call(this, attrs, options);\n      if (isInvalid) {\n        return isInvalid;\n      }\n      if ('name' in attrs && attrs.name !== this.getName()) {\n        var newName = attrs.name;\n        if (this.id && this.id !== attrs.objectId) {\n          // Check to see if the objectId being set matches this.id\n          // This happens during a fetch -- the id is set before calling fetch\n          // Let the name be set in this case\n          return new _ParseError.default(_ParseError.default.OTHER_CAUSE, \"A role's name can only be set before it has been saved.\");\n        }\n        try {\n          this._validateName(newName);\n        } catch (e) {\n          return e;\n        }\n      }\n      return false;\n    }\n  }]);\n  return ParseRole;\n}(_ParseObject2.default);\n_ParseObject2.default.registerSubclass('_Role', ParseRole);\nvar _default = ParseRole;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}