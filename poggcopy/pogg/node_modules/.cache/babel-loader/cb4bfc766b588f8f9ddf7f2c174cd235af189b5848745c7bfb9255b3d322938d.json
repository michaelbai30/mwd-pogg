{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\nvar _LiveQueryClient = _interopRequireDefault(require(\"./LiveQueryClient\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * @flow\n */\n\nfunction getLiveQueryClient() /*: LiveQueryClient*/{\n  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n}\n\n/**\n * We expose three events to help you monitor the status of the WebSocket connection:\n *\n * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('open', () => {\n *\n * });</pre></p>\n *\n * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('close', () => {\n *\n * });</pre></p>\n *\n * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('error', (error) => {\n *\n * });</pre></p>\n *\n * @class Parse.LiveQuery\n * @static\n */\nvar LiveQuery = new _EventEmitter.default();\n\n/**\n * After open is called, the LiveQuery will try to send a connect request\n * to the LiveQuery server.\n */\nLiveQuery.open = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n  var liveQueryClient;\n  return _regenerator.default.wrap(function (_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return getLiveQueryClient();\n      case 2:\n        liveQueryClient = _context.sent;\n        liveQueryClient.open();\n      case 4:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _callee);\n}));\n\n/**\n * When you're done using LiveQuery, you can call Parse.LiveQuery.close().\n * This function will close the WebSocket connection to the LiveQuery server,\n * cancel the auto reconnect, and unsubscribe all subscriptions based on it.\n * If you call query.subscribe() after this, we'll create a new WebSocket\n * connection to the LiveQuery server.\n */\nLiveQuery.close = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n  var liveQueryClient;\n  return _regenerator.default.wrap(function (_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return getLiveQueryClient();\n      case 2:\n        liveQueryClient = _context2.sent;\n        liveQueryClient.close();\n      case 4:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _callee2);\n}));\n\n// Register a default onError callback to make sure we do not crash on error\nLiveQuery.on('error', function () {});\nvar _default = LiveQuery;\nexports.default = _default;\nvar defaultLiveQueryClient;\nvar DefaultLiveQueryController = {\n  setDefaultLiveQueryClient: function (liveQueryClient /*: LiveQueryClient*/) {\n    defaultLiveQueryClient = liveQueryClient;\n  },\n  getDefaultLiveQueryClient: function () /*: Promise<LiveQueryClient>*/{\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n      var _yield$Promise$all, _yield$Promise$all2, currentUser, installationId, sessionToken, liveQueryServerURL, serverURL, protocol, host, applicationId, javascriptKey, masterKey;\n      return _regenerator.default.wrap(function (_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!defaultLiveQueryClient) {\n              _context3.next = 2;\n              break;\n            }\n            return _context3.abrupt(\"return\", defaultLiveQueryClient);\n          case 2:\n            _context3.next = 4;\n            return _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);\n          case 4:\n            _yield$Promise$all = _context3.sent;\n            _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);\n            currentUser = _yield$Promise$all2[0];\n            installationId = _yield$Promise$all2[1];\n            sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n            liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n            if (!(liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, 'ws') !== 0)) {\n              _context3.next = 12;\n              break;\n            }\n            throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n          case 12:\n            // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL\n            if (!liveQueryServerURL) {\n              serverURL = _CoreManager.default.get('SERVER_URL');\n              protocol = (0, _indexOf.default)(serverURL).call(serverURL, 'https') === 0 ? 'wss://' : 'ws://';\n              host = serverURL.replace(/^https?:\\/\\//, '');\n              liveQueryServerURL = protocol + host;\n              _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);\n            }\n            applicationId = _CoreManager.default.get('APPLICATION_ID');\n            javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n            masterKey = _CoreManager.default.get('MASTER_KEY');\n            defaultLiveQueryClient = new _LiveQueryClient.default({\n              applicationId: applicationId,\n              serverURL: liveQueryServerURL,\n              javascriptKey: javascriptKey,\n              masterKey: masterKey,\n              sessionToken: sessionToken,\n              installationId: installationId\n            });\n            defaultLiveQueryClient.on('error', function (error) {\n              LiveQuery.emit('error', error);\n            });\n            defaultLiveQueryClient.on('open', function () {\n              LiveQuery.emit('open');\n            });\n            defaultLiveQueryClient.on('close', function () {\n              LiveQuery.emit('close');\n            });\n            return _context3.abrupt(\"return\", defaultLiveQueryClient);\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  },\n  _clearCachedDefaultClient: function () {\n    defaultLiveQueryClient = null;\n  }\n};\n_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_promise","_indexOf","_regenerator","_slicedToArray2","_asyncToGenerator2","_EventEmitter","_LiveQueryClient","_CoreManager","getLiveQueryClient","getLiveQueryController","getDefaultLiveQueryClient","LiveQuery","open","mark","_callee","liveQueryClient","wrap","_context","prev","next","sent","stop","close","_callee2","_context2","on","_default","defaultLiveQueryClient","DefaultLiveQueryController","setDefaultLiveQueryClient","_callee3","_yield$Promise$all","_yield$Promise$all2","currentUser","installationId","sessionToken","liveQueryServerURL","serverURL","protocol","host","applicationId","javascriptKey","masterKey","_context3","abrupt","all","getUserController","currentUserAsync","getInstallationController","currentInstallationId","getSessionToken","undefined","get","call","Error","replace","set","error","emit","_clearCachedDefaultClient","setLiveQueryController"],"sources":["/home/mspadafo/compsci/MWD/poggcopy/pogg/node_modules/parse/lib/browser/ParseLiveQuery.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/slicedToArray\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _EventEmitter = _interopRequireDefault(require(\"./EventEmitter\"));\nvar _LiveQueryClient = _interopRequireDefault(require(\"./LiveQueryClient\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n/**\n * @flow\n */\n\nfunction getLiveQueryClient() /*: LiveQueryClient*/{\n  return _CoreManager.default.getLiveQueryController().getDefaultLiveQueryClient();\n}\n\n/**\n * We expose three events to help you monitor the status of the WebSocket connection:\n *\n * <p>Open - When we establish the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('open', () => {\n *\n * });</pre></p>\n *\n * <p>Close - When we lose the WebSocket connection to the LiveQuery server, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('close', () => {\n *\n * });</pre></p>\n *\n * <p>Error - When some network error or LiveQuery server error happens, you'll get this event.\n *\n * <pre>\n * Parse.LiveQuery.on('error', (error) => {\n *\n * });</pre></p>\n *\n * @class Parse.LiveQuery\n * @static\n */\nvar LiveQuery = new _EventEmitter.default();\n\n/**\n * After open is called, the LiveQuery will try to send a connect request\n * to the LiveQuery server.\n */\nLiveQuery.open = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n  var liveQueryClient;\n  return _regenerator.default.wrap(function (_context) {\n    while (1) switch (_context.prev = _context.next) {\n      case 0:\n        _context.next = 2;\n        return getLiveQueryClient();\n      case 2:\n        liveQueryClient = _context.sent;\n        liveQueryClient.open();\n      case 4:\n      case \"end\":\n        return _context.stop();\n    }\n  }, _callee);\n}));\n\n/**\n * When you're done using LiveQuery, you can call Parse.LiveQuery.close().\n * This function will close the WebSocket connection to the LiveQuery server,\n * cancel the auto reconnect, and unsubscribe all subscriptions based on it.\n * If you call query.subscribe() after this, we'll create a new WebSocket\n * connection to the LiveQuery server.\n */\nLiveQuery.close = /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n  var liveQueryClient;\n  return _regenerator.default.wrap(function (_context2) {\n    while (1) switch (_context2.prev = _context2.next) {\n      case 0:\n        _context2.next = 2;\n        return getLiveQueryClient();\n      case 2:\n        liveQueryClient = _context2.sent;\n        liveQueryClient.close();\n      case 4:\n      case \"end\":\n        return _context2.stop();\n    }\n  }, _callee2);\n}));\n\n// Register a default onError callback to make sure we do not crash on error\nLiveQuery.on('error', function () {});\nvar _default = LiveQuery;\nexports.default = _default;\nvar defaultLiveQueryClient;\nvar DefaultLiveQueryController = {\n  setDefaultLiveQueryClient: function (liveQueryClient /*: LiveQueryClient*/) {\n    defaultLiveQueryClient = liveQueryClient;\n  },\n  getDefaultLiveQueryClient: function () /*: Promise<LiveQueryClient>*/{\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n      var _yield$Promise$all, _yield$Promise$all2, currentUser, installationId, sessionToken, liveQueryServerURL, serverURL, protocol, host, applicationId, javascriptKey, masterKey;\n      return _regenerator.default.wrap(function (_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!defaultLiveQueryClient) {\n              _context3.next = 2;\n              break;\n            }\n            return _context3.abrupt(\"return\", defaultLiveQueryClient);\n          case 2:\n            _context3.next = 4;\n            return _promise.default.all([_CoreManager.default.getUserController().currentUserAsync(), _CoreManager.default.getInstallationController().currentInstallationId()]);\n          case 4:\n            _yield$Promise$all = _context3.sent;\n            _yield$Promise$all2 = (0, _slicedToArray2.default)(_yield$Promise$all, 2);\n            currentUser = _yield$Promise$all2[0];\n            installationId = _yield$Promise$all2[1];\n            sessionToken = currentUser ? currentUser.getSessionToken() : undefined;\n            liveQueryServerURL = _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n            if (!(liveQueryServerURL && (0, _indexOf.default)(liveQueryServerURL).call(liveQueryServerURL, 'ws') !== 0)) {\n              _context3.next = 12;\n              break;\n            }\n            throw new Error('You need to set a proper Parse LiveQuery server url before using LiveQueryClient');\n          case 12:\n            // If we can not find Parse.liveQueryServerURL, we try to extract it from Parse.serverURL\n            if (!liveQueryServerURL) {\n              serverURL = _CoreManager.default.get('SERVER_URL');\n              protocol = (0, _indexOf.default)(serverURL).call(serverURL, 'https') === 0 ? 'wss://' : 'ws://';\n              host = serverURL.replace(/^https?:\\/\\//, '');\n              liveQueryServerURL = protocol + host;\n              _CoreManager.default.set('LIVEQUERY_SERVER_URL', liveQueryServerURL);\n            }\n            applicationId = _CoreManager.default.get('APPLICATION_ID');\n            javascriptKey = _CoreManager.default.get('JAVASCRIPT_KEY');\n            masterKey = _CoreManager.default.get('MASTER_KEY');\n            defaultLiveQueryClient = new _LiveQueryClient.default({\n              applicationId: applicationId,\n              serverURL: liveQueryServerURL,\n              javascriptKey: javascriptKey,\n              masterKey: masterKey,\n              sessionToken: sessionToken,\n              installationId: installationId\n            });\n            defaultLiveQueryClient.on('error', function (error) {\n              LiveQuery.emit('error', error);\n            });\n            defaultLiveQueryClient.on('open', function () {\n              LiveQuery.emit('open');\n            });\n            defaultLiveQueryClient.on('close', function () {\n              LiveQuery.emit('close');\n            });\n            return _context3.abrupt(\"return\", defaultLiveQueryClient);\n          case 21:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, _callee3);\n    }))();\n  },\n  _clearCachedDefaultClient: function () {\n    defaultLiveQueryClient = null;\n  }\n};\n_CoreManager.default.setLiveQueryController(DefaultLiveQueryController);"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}