{"ast":null,"code":"\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _ParseOp = require(\"./ParseOp\");\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * @flow\n */\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\nvar ParseRelation = /*#__PURE__*/function () {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  function ParseRelation(parent /*: ?ParseObject*/, key /*: ?string*/) {\n    (0, _classCallCheck2.default)(this, ParseRelation);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n  (0, _createClass2.default)(ParseRelation, [{\n    key: \"_ensureParentAndKey\",\n    value: function (parent /*: ParseObject*/, key /*: string*/) {\n      this.key = this.key || key;\n      if (this.key !== key) {\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\n      }\n      if (this.parent) {\n        if (this.parent.className !== parent.className) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n        if (this.parent.id) {\n          if (this.parent.id !== parent.id) {\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\n          }\n        } else if (parent.id) {\n          this.parent = parent;\n        }\n      } else {\n        this.parent = parent;\n      }\n    }\n\n    /**\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to add.\n     * @returns {Parse.Object} The parent of the relation.\n     */\n  }, {\n    key: \"add\",\n    value: function (objects /*: ParseObject | Array<ParseObject | string>*/) /*: ParseObject*/{\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n      var change = new _ParseOp.RelationOp(objects, []);\n      var parent = this.parent;\n      if (!parent) {\n        throw new Error('Cannot add to a Relation without a parent');\n      }\n      if (objects.length === 0) {\n        return parent;\n      }\n      parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n      return parent;\n    }\n\n    /**\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\n     */\n  }, {\n    key: \"remove\",\n    value: function (objects /*: ParseObject | Array<ParseObject | string>*/) {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n      var change = new _ParseOp.RelationOp([], objects);\n      if (!this.parent) {\n        throw new Error('Cannot remove from a Relation without a parent');\n      }\n      if (objects.length === 0) {\n        return;\n      }\n      this.parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n    }\n\n    /**\n     * Returns a JSON version of the object suitable for saving to disk.\n     *\n     * @returns {object} JSON representation of Relation\n     */\n  }, {\n    key: \"toJSON\",\n    value: function () /*: { __type: 'Relation', className: ?string }*/{\n      return {\n        __type: 'Relation',\n        className: this.targetClassName\n      };\n    }\n\n    /**\n     * Returns a Parse.Query that is limited to objects in this\n     * relation.\n     *\n     * @returns {Parse.Query} Relation Query\n     */\n  }, {\n    key: \"query\",\n    value: function query() /*: ParseQuery*/{\n      var query;\n      var parent = this.parent;\n      if (!parent) {\n        throw new Error('Cannot construct a query for a Relation without a parent');\n      }\n      if (!this.targetClassName) {\n        query = new _ParseQuery.default(parent.className);\n        query._extraOptions.redirectClassNameForKey = this.key;\n      } else {\n        query = new _ParseQuery.default(this.targetClassName);\n      }\n      query._addCondition('$relatedTo', 'object', {\n        __type: 'Pointer',\n        className: parent.className,\n        objectId: parent.id\n      });\n      query._addCondition('$relatedTo', 'key', this.key);\n      return query;\n    }\n  }]);\n  return ParseRelation;\n}();\nvar _default = ParseRelation;\nexports.default = _default;","map":{"version":3,"names":["_Object$defineProperty","require","_interopRequireDefault","exports","value","default","_isArray","_classCallCheck2","_createClass2","_defineProperty2","_ParseOp","_ParseObject","_ParseQuery","ParseRelation","parent","key","targetClassName","Error","className","id","objects","change","RelationOp","length","set","_targetClassName","__type","query","_extraOptions","redirectClassNameForKey","_addCondition","objectId","_default"],"sources":["/home/mspadafo/compsci/MWD/poggcopy/pogg/node_modules/parse/lib/browser/ParseRelation.js"],"sourcesContent":["\"use strict\";\n\nvar _Object$defineProperty = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\nvar _ParseOp = require(\"./ParseOp\");\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n/**\n * @flow\n */\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\nvar ParseRelation = /*#__PURE__*/function () {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  function ParseRelation(parent /*: ?ParseObject*/, key /*: ?string*/) {\n    (0, _classCallCheck2.default)(this, ParseRelation);\n    (0, _defineProperty2.default)(this, \"parent\", void 0);\n    (0, _defineProperty2.default)(this, \"key\", void 0);\n    (0, _defineProperty2.default)(this, \"targetClassName\", void 0);\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n  (0, _createClass2.default)(ParseRelation, [{\n    key: \"_ensureParentAndKey\",\n    value: function (parent /*: ParseObject*/, key /*: string*/) {\n      this.key = this.key || key;\n      if (this.key !== key) {\n        throw new Error('Internal Error. Relation retrieved from two different keys.');\n      }\n      if (this.parent) {\n        if (this.parent.className !== parent.className) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n        if (this.parent.id) {\n          if (this.parent.id !== parent.id) {\n            throw new Error('Internal Error. Relation retrieved from two different Objects.');\n          }\n        } else if (parent.id) {\n          this.parent = parent;\n        }\n      } else {\n        this.parent = parent;\n      }\n    }\n\n    /**\n     * Adds a Parse.Object or an array of Parse.Objects to the relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to add.\n     * @returns {Parse.Object} The parent of the relation.\n     */\n  }, {\n    key: \"add\",\n    value: function (objects /*: ParseObject | Array<ParseObject | string>*/) /*: ParseObject*/{\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n      var change = new _ParseOp.RelationOp(objects, []);\n      var parent = this.parent;\n      if (!parent) {\n        throw new Error('Cannot add to a Relation without a parent');\n      }\n      if (objects.length === 0) {\n        return parent;\n      }\n      parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n      return parent;\n    }\n\n    /**\n     * Removes a Parse.Object or an array of Parse.Objects from this relation.\n     *\n     * @param {(Parse.Object|Array)} objects The item or items to remove.\n     */\n  }, {\n    key: \"remove\",\n    value: function (objects /*: ParseObject | Array<ParseObject | string>*/) {\n      if (!(0, _isArray.default)(objects)) {\n        objects = [objects];\n      }\n      var change = new _ParseOp.RelationOp([], objects);\n      if (!this.parent) {\n        throw new Error('Cannot remove from a Relation without a parent');\n      }\n      if (objects.length === 0) {\n        return;\n      }\n      this.parent.set(this.key, change);\n      this.targetClassName = change._targetClassName;\n    }\n\n    /**\n     * Returns a JSON version of the object suitable for saving to disk.\n     *\n     * @returns {object} JSON representation of Relation\n     */\n  }, {\n    key: \"toJSON\",\n    value: function () /*: { __type: 'Relation', className: ?string }*/{\n      return {\n        __type: 'Relation',\n        className: this.targetClassName\n      };\n    }\n\n    /**\n     * Returns a Parse.Query that is limited to objects in this\n     * relation.\n     *\n     * @returns {Parse.Query} Relation Query\n     */\n  }, {\n    key: \"query\",\n    value: function query() /*: ParseQuery*/{\n      var query;\n      var parent = this.parent;\n      if (!parent) {\n        throw new Error('Cannot construct a query for a Relation without a parent');\n      }\n      if (!this.targetClassName) {\n        query = new _ParseQuery.default(parent.className);\n        query._extraOptions.redirectClassNameForKey = this.key;\n      } else {\n        query = new _ParseQuery.default(this.targetClassName);\n      }\n      query._addCondition('$relatedTo', 'object', {\n        __type: 'Pointer',\n        className: parent.className,\n        objectId: parent.id\n      });\n      query._addCondition('$relatedTo', 'key', this.key);\n      return query;\n    }\n  }]);\n  return ParseRelation;\n}();\nvar _default = ParseRelation;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}