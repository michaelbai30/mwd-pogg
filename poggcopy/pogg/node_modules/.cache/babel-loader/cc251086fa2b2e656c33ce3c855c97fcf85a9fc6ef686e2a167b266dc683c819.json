{"ast":null,"code":"\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} /**\n   * @flow\n   */\n/*:: import type { AttributeMap } from './ObjectStateMutations';*/\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\n/*:: export type AuthData = ?{ [key: string]: mixed };*/\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n  function ParseUser(attributes /*: ?AttributeMap*/) {\n    var _this;\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options /*: RequestOptions*/) /*: Promise<void>*/{\n      options = options || {};\n      var upgradeOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n  }, {\n    key: \"linkWith\",\n    value: function (provider /*: any*/, options /*: { authData?: AuthData }*/) /*: Promise<ParseUser>*/{\n      var _this2 = this;\n      var saveOpts /*:: ?: FullOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n        authData[authType] = options.authData;\n        var controller = _CoreManager.default.getUserController();\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n  }, {\n    key: \"_linkWith\",\n    value: function (provider /*: any*/, options /*: { authData?: AuthData }*/) /*: Promise<ParseUser>*/{\n      var saveOpts /*:: ?: FullOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider /*: string*/) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n      var authData = this.get('authData');\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      var success = provider.restoreAuthentication(authData[authType]);\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n\n    /**\n     * Synchronizes authData for all providers.\n     */\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider /*: any*/, options /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/{\n      var _this3 = this;\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n        return _promise.default.resolve(_this3);\n      });\n    }\n\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n  }, {\n    key: \"_isLinked\",\n    value: function (provider /*: any*/) /*: boolean*/{\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n      var authData = this.get('authData') || {};\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n      return !!authData[authType];\n    }\n\n    /**\n     * Deauthenticates all providers.\n     */\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider /*: any*/) {\n      if (!this.isCurrent()) {\n        return;\n      }\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function () /*: AttributeMap*/{\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n  }, {\n    key: \"isCurrent\",\n    value: function () /*: boolean*/{\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {Promise<boolean>} true if user is cached on disk\n     */\n  }, {\n    key: \"isCurrentAsync\",\n    value: function () {\n      var _isCurrentAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var current;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return ParseUser.currentAsync();\n            case 2:\n              current = _context.sent;\n              return _context.abrupt(\"return\", !!current && current.id === this.id);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function isCurrentAsync() {\n        return _isCurrentAsync.apply(this, arguments);\n      }\n      return isCurrentAsync;\n    }()\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getUsername\",\n    value: function () /*: ?string*/{\n      var username = this.get('username');\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n      return '';\n    }\n\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n  }, {\n    key: \"setUsername\",\n    value: function (username /*: string*/) {\n      // Strip anonymity\n      var authData = this.get('authData');\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n      this.set('username', username);\n    }\n\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n  }, {\n    key: \"setPassword\",\n    value: function (password /*: string*/) {\n      this.set('password', password);\n    }\n\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n  }, {\n    key: \"getEmail\",\n    value: function () /*: ?string*/{\n      var email = this.get('email');\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n      return '';\n    }\n\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n  }, {\n    key: \"setEmail\",\n    value: function (email /*: string*/) {\n      return this.set('email', email);\n    }\n\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n  }, {\n    key: \"getSessionToken\",\n    value: function () /*: ?string*/{\n      var token = this.get('sessionToken');\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n      return '';\n    }\n\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n  }, {\n    key: \"authenticated\",\n    value: function () /*: boolean*/{\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n  }, {\n    key: \"signUp\",\n    value: function (attrs /*: AttributeMap*/, options /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/{\n      options = options || {};\n      var signupOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('context') && Object.prototype.toString.call(options.context) === '[object Object]') {\n        signupOptions.context = options.context;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.signUp(this, attrs, signupOptions);\n    }\n\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n  }, {\n    key: \"logIn\",\n    value: function (options /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/{\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.logIn(this, loginOptions);\n    }\n\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _len,\n          args,\n          _key4,\n          current,\n          _args2 = arguments;\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n                args[_key4] = _args2[_key4];\n              }\n              _context2.next = 3;\n              return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args);\n            case 3:\n              _context2.next = 5;\n              return this.isCurrentAsync();\n            case 5:\n              current = _context2.sent;\n              if (!current) {\n                _context2.next = 8;\n                break;\n              }\n              return _context2.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n            case 8:\n              return _context2.abrupt(\"return\", this);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function save() {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _len2,\n          args,\n          _key5,\n          current,\n          _args3 = arguments;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n                args[_key5] = _args3[_key5];\n              }\n              _context3.next = 3;\n              return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args);\n            case 3:\n              _context3.next = 5;\n              return this.isCurrentAsync();\n            case 5:\n              current = _context3.sent;\n              if (!current) {\n                _context3.next = 8;\n                break;\n              }\n              return _context3.abrupt(\"return\", _CoreManager.default.getUserController().removeUserFromDisk());\n            case 8:\n              return _context3.abrupt(\"return\", this);\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n      return destroy;\n    }()\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var _len3,\n          args,\n          _key6,\n          current,\n          _args4 = arguments;\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n                args[_key6] = _args4[_key6];\n              }\n              _context4.next = 3;\n              return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args);\n            case 3:\n              _context4.next = 5;\n              return this.isCurrentAsync();\n            case 5:\n              current = _context4.sent;\n              if (!current) {\n                _context4.next = 8;\n                break;\n              }\n              return _context4.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n            case 8:\n              return _context4.abrupt(\"return\", this);\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n      return fetch;\n    }()\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () {\n      var _fetchWithInclude = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var _len4,\n          args,\n          _key7,\n          current,\n          _args5 = arguments;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n                args[_key7] = _args5[_key7];\n              }\n              _context5.next = 3;\n              return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args);\n            case 3:\n              _context5.next = 5;\n              return this.isCurrentAsync();\n            case 5:\n              current = _context5.sent;\n              if (!current) {\n                _context5.next = 8;\n                break;\n              }\n              return _context5.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n            case 8:\n              return _context5.abrupt(\"return\", this);\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function fetchWithInclude() {\n        return _fetchWithInclude.apply(this, arguments);\n      }\n      return fetchWithInclude;\n    }()\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n  }, {\n    key: \"verifyPassword\",\n    value: function (password /*: string*/, options /*:: ?: RequestOptions*/) /*: Promise<ParseUser>*/{\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n  }, {\n    key: \"extend\",\n    value: function (protoProps /*: { [prop: string]: any }*/, classProps /*: { [prop: string]: any }*/) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      return ParseUser;\n    }\n\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n  }, {\n    key: \"current\",\n    value: function () /*: ?ParseUser*/{\n      if (!canUseCurrentUser) {\n        return null;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.currentUser();\n    }\n\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n  }, {\n    key: \"currentAsync\",\n    value: function () /*: Promise<?ParseUser>*/{\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.currentUserAsync();\n    }\n\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n  }, {\n    key: \"signUp\",\n    value: function (username /*: string*/, password /*: string*/, attrs /*: AttributeMap*/, options /*:: ?: FullOptions*/) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"logIn\",\n    value: function (username /*: string*/, password /*: string*/, options /*:: ?: FullOptions*/) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n      var user = new this();\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n      return user.logIn(options);\n    }\n\n    /**\n     * Logs in a user with an objectId. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} userId The objectId for the user.\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"loginAs\",\n    value: function (userId /*: string*/) {\n      if (!userId) {\n        throw new _ParseError.default(_ParseError.default.USERNAME_MISSING, 'Cannot log in as user with an empty user id');\n      }\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.loginAs(user, userId);\n    }\n\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"become\",\n    value: function (sessionToken /*: string*/, options /*:: ?: RequestOptions*/) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n      options = options || {};\n      var becomeOptions /*: RequestOptions*/ = {\n        sessionToken: sessionToken\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n  }, {\n    key: \"me\",\n    value: function (sessionToken /*: string*/) {\n      var options /*:: ?: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var controller = _CoreManager.default.getUserController();\n      var meOptions /*: RequestOptions*/ = {\n        sessionToken: sessionToken\n      };\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON /*: AttributeMap*/) {\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"logInWith\",\n    value: function (provider /*: any*/, options /*: { authData?: AuthData }*/, saveOpts /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/{\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options /*: RequestOptions*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var controller = _CoreManager.default.getUserController();\n      return controller.logOut(options);\n    }\n\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email /*: string*/, options /*:: ?: RequestOptions*/) {\n      options = options || {};\n      var requestOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     needs to verify their email.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email /*: string*/, options /*:: ?: RequestOptions*/) {\n      options = options || {};\n      var requestOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n  }, {\n    key: \"verifyPassword\",\n    value: function (username /*: string*/, password /*: string*/, options /*:: ?: RequestOptions*/) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n      options = options || {};\n      var verificationOption = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed /*: boolean*/) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options /*:: ?: RequestOptions*/) {\n      options = options || {};\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n      return _promise.default.resolve();\n    }\n\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider /*: any*/) {\n      authProviders[provider.getAuthType()] = provider;\n      // Synchronize the current user with the auth provider.\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"_logInWith\",\n    value: function (provider /*: any*/, options /*: { authData?: AuthData }*/, saveOpts /*:: ?: FullOptions*/) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user /*: ParseUser*/) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n_ParseObject2.default.registerSubclass('_User', ParseUser);\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    currentUserCache = user;\n    user._cleanupAuthData();\n    user._synchronizeAllAuthData();\n    return DefaultController.updateUserOnDisk(user);\n  },\n  currentUser: function () /*: ?ParseUser*/{\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    var userData = _Storage.default.getItem(path);\n    currentUserCacheMatchesDisk = true;\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n    userData = JSON.parse(userData);\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n      delete userData._id;\n    }\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n    var current = _ParseObject2.default.fromJSON(userData);\n    currentUserCache = current;\n    current._synchronizeAllAuthData();\n    return current;\n  },\n  currentUserAsync: function () /*: Promise<?ParseUser>*/{\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n      userData = JSON.parse(userData);\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n        delete userData._id;\n      }\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n      var current = _ParseObject2.default.fromJSON(userData);\n      currentUserCache = current;\n      current._synchronizeAllAuthData();\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user /*: ParseUser*/, attrs /*: AttributeMap*/, options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return user;\n    });\n  },\n  logIn: function (user /*: ParseUser*/, options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    var stateController = _CoreManager.default.getObjectStateController();\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n      user._setExisted(true);\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n      user._finishFetch(response);\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  loginAs: function (user /*: ParseUser*/, userId /*: string*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'loginAs', {\n      userId: userId\n    }, {\n      useMasterKey: true\n    }).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(user);\n      }\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user /*: ParseUser*/, options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user /*: ParseUser*/, userJSON /*: AttributeMap*/) /*: Promise<ParseUser>*/{\n    user._finishFetch(userJSON);\n    user._setExisted(true);\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user /*: ParseUser*/, options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      return user;\n    });\n  },\n  logOut: function (options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n      var promise = _Storage.default.removeItemAsync(path);\n      if (currentUser !== null) {\n        var currentSession = currentUser.getSessionToken();\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n        currentUser._logOutWithAll();\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email /*: string*/, options /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user /*: ParseUser*/, options /*: RequestOptions*/) {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var token, RESTController, result, session, current;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            token = user.getSessionToken();\n            if (token) {\n              _context6.next = 3;\n              break;\n            }\n            return _context6.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));\n          case 3:\n            options.sessionToken = token;\n            RESTController = _CoreManager.default.getRESTController();\n            _context6.next = 7;\n            return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);\n          case 7:\n            result = _context6.sent;\n            session = new _ParseSession.default();\n            session._finishFetch(result);\n            user._finishFetch({\n              sessionToken: session.getSessionToken()\n            });\n            _context6.next = 13;\n            return user.isCurrentAsync();\n          case 13:\n            current = _context6.sent;\n            if (!current) {\n              _context6.next = 16;\n              break;\n            }\n            return _context6.abrupt(\"return\", DefaultController.setCurrentUser(user));\n          case 16:\n            return _context6.abrupt(\"return\", _promise.default.resolve(user));\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }))();\n  },\n  linkWith: function (user /*: ParseUser*/, authData /*: AuthData*/, options /*: FullOptions*/) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return user;\n    });\n  },\n  verifyPassword: function (username /*: string*/, password /*: string*/, options /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email /*: string*/, options /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n_CoreManager.default.setUserController(DefaultController);\nvar _default = ParseUser;\nexports.default = _default;","map":{"version":3,"names":["_Reflect$construct","require","_Object$defineProperty2","_interopRequireDefault","exports","value","default","_regenerator","_promise","_defineProperty","_stringify","_asyncToGenerator2","_typeof2","_classCallCheck2","_createClass2","_get2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_CoreManager","_isRevocableSession","_ParseError","_ParseObject2","_ParseSession","_Storage","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","Super","result","NewTarget","constructor","arguments","apply","Reflect","sham","Proxy","Boolean","prototype","valueOf","call","e","CURRENT_USER_KEY","canUseCurrentUser","get","currentUserCacheMatchesDisk","currentUserCache","authProviders","ParseUser","_ParseObject","_super","attributes","_this","set","Error","key","options","upgradeOptions","hasOwnProperty","useMasterKey","controller","getUserController","upgradeToRevocableSession","provider","_this2","saveOpts","length","undefined","sessionToken","getSessionToken","authType","authProvider","restoreAuthentication","getAuthType","authData","linkWith","resolve","reject","authenticate","success","opts","then","error","_error","isCurrent","_unlinkFrom","_key","_synchronizeAuthData","_key2","_this3","_key3","_logOutWith","deauthenticate","current","id","_isCurrentAsync","mark","_callee","wrap","_context","prev","next","currentAsync","sent","abrupt","stop","isCurrentAsync","username","anonymous","password","email","token","attrs","signupOptions","installationId","Object","toString","context","signUp","loginOptions","usePost","logIn","_save","_callee2","_len","args","_key4","_args2","_context2","Array","updateUserOnDisk","save","_destroy","_callee3","_len2","_key5","_args3","_context3","removeUserFromDisk","destroy","_fetch","_callee4","_len3","_key6","_args4","_context4","fetch","_fetchWithInclude","_callee5","_len4","_key7","_args5","_context5","fetchWithInclude","getUsername","verifyPassword","protoProps","classProps","_prop","enumerable","writable","configurable","_prop2","currentUser","currentUserAsync","user","OTHER_CAUSE","_finishFetch","userId","USERNAME_MISSING","loginAs","becomeOptions","become","meOptions","me","userJSON","hydrate","logOut","requestOptions","requestPasswordReset","requestEmailVerification","verificationOption","isAllowed","_upgradeToRevocableSession","registerSubclass","DefaultController","path","generatePath","json","toJSON","className","userData","crypto","getCryptoController","encrypt","setItemAsync","removeItemAsync","setCurrentUser","_cleanupAuthData","_synchronizeAllAuthData","async","getItem","decrypt","JSON","parse","_id","objectId","_sessionToken","fromJSON","getItemAsync","RESTController","getRESTController","stateController","getObjectStateController","auth","request","response","_migrateId","_setExisted","setPendingOp","_getStateIdentifier","promise","currentSession","_logOutWithAll","_callee6","session","_context6","SESSION_MISSING","setUserController","_default"],"sources":["/home/mspadafo/compsci/MWD/poggcopy/pogg/node_modules/parse/lib/browser/ParseUser.js"],"sourcesContent":["\"use strict\";\n\nvar _Reflect$construct = require(\"@babel/runtime-corejs3/core-js-stable/reflect/construct\");\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/get\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/inherits\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/getPrototypeOf\"));\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\nvar _isRevocableSession = _interopRequireDefault(require(\"./isRevocableSession\"));\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\nvar _ParseObject2 = _interopRequireDefault(require(\"./ParseObject\"));\nvar _ParseSession = _interopRequireDefault(require(\"./ParseSession\"));\nvar _Storage = _interopRequireDefault(require(\"./Storage\"));\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function () {\n    var Super = (0, _getPrototypeOf2.default)(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = (0, _getPrototypeOf2.default)(this).constructor;\n      result = _Reflect$construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return (0, _possibleConstructorReturn2.default)(this, result);\n  };\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !_Reflect$construct) return false;\n  if (_Reflect$construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(_Reflect$construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n} /**\n   * @flow\n   */\n/*:: import type { AttributeMap } from './ObjectStateMutations';*/\n/*:: import type { RequestOptions, FullOptions } from './RESTController';*/\n/*:: export type AuthData = ?{ [key: string]: mixed };*/\nvar CURRENT_USER_KEY = 'currentUser';\nvar canUseCurrentUser = !_CoreManager.default.get('IS_NODE');\nvar currentUserCacheMatchesDisk = false;\nvar currentUserCache = null;\nvar authProviders = {};\n\n/**\n * <p>A Parse.User object is a local representation of a user persisted to the\n * Parse cloud. This class is a subclass of a Parse.Object, and retains the\n * same functionality of a Parse.Object, but also extends it with various\n * user specific methods, like authentication, signing up, and validation of\n * uniqueness.</p>\n *\n * @alias Parse.User\n * @augments Parse.Object\n */\nvar ParseUser = /*#__PURE__*/function (_ParseObject) {\n  (0, _inherits2.default)(ParseUser, _ParseObject);\n  var _super = _createSuper(ParseUser);\n  /**\n   * @param {object} attributes The initial set of data to store in the user.\n   */\n  function ParseUser(attributes /*: ?AttributeMap*/) {\n    var _this;\n    (0, _classCallCheck2.default)(this, ParseUser);\n    _this = _super.call(this, '_User');\n    if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n      if (!_this.set(attributes || {})) {\n        throw new Error(\"Can't create an invalid Parse User\");\n      }\n    }\n    return _this;\n  }\n\n  /**\n   * Request a revocable session token to replace the older style of token.\n   *\n   * @param {object} options\n   * @returns {Promise} A promise that is resolved when the replacement\n   *   token has been fetched.\n   */\n  (0, _createClass2.default)(ParseUser, [{\n    key: \"_upgradeToRevocableSession\",\n    value: function (options /*: RequestOptions*/) /*: Promise<void>*/{\n      options = options || {};\n      var upgradeOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        upgradeOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.upgradeToRevocableSession(this, upgradeOptions);\n    }\n\n    /**\n     * Parse allows you to link your users with {@link https://docs.parseplatform.org/parse-server/guide/#oauth-and-3rd-party-authentication 3rd party authentication}, enabling\n     * your users to sign up or log into your application using their existing identities.\n     * Since 2.9.0\n     *\n     * @see {@link https://docs.parseplatform.org/js/guide/#linking-users Linking Users}\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options\n     * <ul>\n     *   <li>If provider is string, options is {@link http://docs.parseplatform.org/parse-server/guide/#supported-3rd-party-authentications authData}\n     *   <li>If provider is AuthProvider, options is saveOpts\n     * </ul>\n     * @param {object} saveOpts useMasterKey / sessionToken\n     * @returns {Promise} A promise that is fulfilled with the user is linked\n     */\n  }, {\n    key: \"linkWith\",\n    value: function (provider /*: any*/, options /*: { authData?: AuthData }*/) /*: Promise<ParseUser>*/{\n      var _this2 = this;\n      var saveOpts /*:: ?: FullOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      saveOpts.sessionToken = saveOpts.sessionToken || this.getSessionToken() || '';\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n        if (authProviders[provider]) {\n          provider = authProviders[provider];\n        } else {\n          var authProvider = {\n            restoreAuthentication: function () {\n              return true;\n            },\n            getAuthType: function () {\n              return authType;\n            }\n          };\n          authProviders[authProvider.getAuthType()] = authProvider;\n          provider = authProvider;\n        }\n      } else {\n        authType = provider.getAuthType();\n      }\n      if (options && options.hasOwnProperty('authData')) {\n        var authData = this.get('authData') || {};\n        if ((0, _typeof2.default)(authData) !== 'object') {\n          throw new Error('Invalid type: authData field should be an object');\n        }\n        authData[authType] = options.authData;\n        var controller = _CoreManager.default.getUserController();\n        return controller.linkWith(this, authData, saveOpts);\n      } else {\n        return new _promise.default(function (resolve, reject) {\n          provider.authenticate({\n            success: function (provider, result) {\n              var opts = {};\n              opts.authData = result;\n              _this2.linkWith(provider, opts, saveOpts).then(function () {\n                resolve(_this2);\n              }, function (error) {\n                reject(error);\n              });\n            },\n            error: function (provider, _error) {\n              reject(_error);\n            }\n          });\n        });\n      }\n    }\n\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     * @returns {Promise}\n     */\n  }, {\n    key: \"_linkWith\",\n    value: function (provider /*: any*/, options /*: { authData?: AuthData }*/) /*: Promise<ParseUser>*/{\n      var saveOpts /*:: ?: FullOptions*/ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.linkWith(provider, options, saveOpts);\n    }\n\n    /**\n     * Synchronizes auth data for a provider (e.g. puts the access token in the\n     * right place to be used by the Facebook SDK).\n     *\n     * @param provider\n     */\n  }, {\n    key: \"_synchronizeAuthData\",\n    value: function (provider /*: string*/) {\n      if (!this.isCurrent() || !provider) {\n        return;\n      }\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n        provider = authProviders[authType];\n      } else {\n        authType = provider.getAuthType();\n      }\n      var authData = this.get('authData');\n      if (!provider || !authData || (0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      var success = provider.restoreAuthentication(authData[authType]);\n      if (!success) {\n        this._unlinkFrom(provider);\n      }\n    }\n\n    /**\n     * Synchronizes authData for all providers.\n     */\n  }, {\n    key: \"_synchronizeAllAuthData\",\n    value: function () {\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key in authData) {\n        this._synchronizeAuthData(_key);\n      }\n    }\n\n    /**\n     * Removes null values from authData (which exist temporarily for unlinking)\n     */\n  }, {\n    key: \"_cleanupAuthData\",\n    value: function () {\n      if (!this.isCurrent()) {\n        return;\n      }\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key2 in authData) {\n        if (!authData[_key2]) {\n          delete authData[_key2];\n        }\n      }\n    }\n\n    /**\n     * Unlinks a user from a service.\n     *\n     * @param {string | AuthProvider} provider Name of auth provider or {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @param {object} options MasterKey / SessionToken\n     * @returns {Promise} A promise that is fulfilled when the unlinking\n     *     finishes.\n     */\n  }, {\n    key: \"_unlinkFrom\",\n    value: function (provider /*: any*/, options /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/{\n      var _this3 = this;\n      return this.linkWith(provider, {\n        authData: null\n      }, options).then(function () {\n        _this3._synchronizeAuthData(provider);\n        return _promise.default.resolve(_this3);\n      });\n    }\n\n    /**\n     * Checks whether a user is linked to a service.\n     *\n     * @param {object} provider service to link to\n     * @returns {boolean} true if link was successful\n     */\n  }, {\n    key: \"_isLinked\",\n    value: function (provider /*: any*/) /*: boolean*/{\n      var authType;\n      if (typeof provider === 'string') {\n        authType = provider;\n      } else {\n        authType = provider.getAuthType();\n      }\n      var authData = this.get('authData') || {};\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return false;\n      }\n      return !!authData[authType];\n    }\n\n    /**\n     * Deauthenticates all providers.\n     */\n  }, {\n    key: \"_logOutWithAll\",\n    value: function () {\n      var authData = this.get('authData');\n      if ((0, _typeof2.default)(authData) !== 'object') {\n        return;\n      }\n      for (var _key3 in authData) {\n        this._logOutWith(_key3);\n      }\n    }\n\n    /**\n     * Deauthenticates a single provider (e.g. removing access tokens from the\n     * Facebook SDK).\n     *\n     * @param {object} provider service to logout of\n     */\n  }, {\n    key: \"_logOutWith\",\n    value: function (provider /*: any*/) {\n      if (!this.isCurrent()) {\n        return;\n      }\n      if (typeof provider === 'string') {\n        provider = authProviders[provider];\n      }\n      if (provider && provider.deauthenticate) {\n        provider.deauthenticate();\n      }\n    }\n\n    /**\n     * Class instance method used to maintain specific keys when a fetch occurs.\n     * Used to ensure that the session token is not lost.\n     *\n     * @returns {object} sessionToken\n     */\n  }, {\n    key: \"_preserveFieldsOnFetch\",\n    value: function () /*: AttributeMap*/{\n      return {\n        sessionToken: this.get('sessionToken')\n      };\n    }\n\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {boolean} true if user is cached on disk\n     */\n  }, {\n    key: \"isCurrent\",\n    value: function () /*: boolean*/{\n      var current = ParseUser.current();\n      return !!current && current.id === this.id;\n    }\n\n    /**\n     * Returns true if <code>current</code> would return this user.\n     *\n     * @returns {Promise<boolean>} true if user is cached on disk\n     */\n  }, {\n    key: \"isCurrentAsync\",\n    value: function () {\n      var _isCurrentAsync = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee() {\n        var current;\n        return _regenerator.default.wrap(function (_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return ParseUser.currentAsync();\n            case 2:\n              current = _context.sent;\n              return _context.abrupt(\"return\", !!current && current.id === this.id);\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function isCurrentAsync() {\n        return _isCurrentAsync.apply(this, arguments);\n      }\n      return isCurrentAsync;\n    }()\n    /**\n     * Returns get(\"username\").\n     *\n     * @returns {string}\n     */\n  }, {\n    key: \"getUsername\",\n    value: function () /*: ?string*/{\n      var username = this.get('username');\n      if (username == null || typeof username === 'string') {\n        return username;\n      }\n      return '';\n    }\n\n    /**\n     * Calls set(\"username\", username, options) and returns the result.\n     *\n     * @param {string} username\n     */\n  }, {\n    key: \"setUsername\",\n    value: function (username /*: string*/) {\n      // Strip anonymity\n      var authData = this.get('authData');\n      if (authData && (0, _typeof2.default)(authData) === 'object' && authData.hasOwnProperty('anonymous')) {\n        // We need to set anonymous to null instead of deleting it in order to remove it from Parse.\n        authData.anonymous = null;\n      }\n      this.set('username', username);\n    }\n\n    /**\n     * Calls set(\"password\", password, options) and returns the result.\n     *\n     * @param {string} password User's Password\n     */\n  }, {\n    key: \"setPassword\",\n    value: function (password /*: string*/) {\n      this.set('password', password);\n    }\n\n    /**\n     * Returns get(\"email\").\n     *\n     * @returns {string} User's Email\n     */\n  }, {\n    key: \"getEmail\",\n    value: function () /*: ?string*/{\n      var email = this.get('email');\n      if (email == null || typeof email === 'string') {\n        return email;\n      }\n      return '';\n    }\n\n    /**\n     * Calls set(\"email\", email) and returns the result.\n     *\n     * @param {string} email\n     * @returns {boolean}\n     */\n  }, {\n    key: \"setEmail\",\n    value: function (email /*: string*/) {\n      return this.set('email', email);\n    }\n\n    /**\n     * Returns the session token for this user, if the user has been logged in,\n     * or if it is the result of a query with the master key. Otherwise, returns\n     * undefined.\n     *\n     * @returns {string} the session token, or undefined\n     */\n  }, {\n    key: \"getSessionToken\",\n    value: function () /*: ?string*/{\n      var token = this.get('sessionToken');\n      if (token == null || typeof token === 'string') {\n        return token;\n      }\n      return '';\n    }\n\n    /**\n     * Checks whether this user is the current user and has been authenticated.\n     *\n     * @returns {boolean} whether this user is the current user and is logged in.\n     */\n  }, {\n    key: \"authenticated\",\n    value: function () /*: boolean*/{\n      var current = ParseUser.current();\n      return !!this.get('sessionToken') && !!current && current.id === this.id;\n    }\n\n    /**\n     * Signs up a new user. You should call this instead of save for\n     * new Parse.Users. This will create a new Parse.User on the server, and\n     * also persist the session on disk so that you can access the user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling signUp.</p>\n     *\n     * @param {object} attrs Extra fields to set on the new user, or null.\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled when the signup\n     *     finishes.\n     */\n  }, {\n    key: \"signUp\",\n    value: function (attrs /*: AttributeMap*/, options /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/{\n      options = options || {};\n      var signupOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        signupOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('installationId')) {\n        signupOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('context') && Object.prototype.toString.call(options.context) === '[object Object]') {\n        signupOptions.context = options.context;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.signUp(this, attrs, signupOptions);\n    }\n\n    /**\n     * Logs in a Parse.User. On success, this saves the session to disk,\n     * so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * <p>A username and password must be set before calling logIn.</p>\n     *\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login is complete.\n     */\n  }, {\n    key: \"logIn\",\n    value: function (options /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/{\n      options = options || {};\n      var loginOptions = {\n        usePost: true\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        loginOptions.useMasterKey = options.useMasterKey;\n      }\n      if (options.hasOwnProperty('installationId')) {\n        loginOptions.installationId = options.installationId;\n      }\n      if (options.hasOwnProperty('usePost')) {\n        loginOptions.usePost = options.usePost;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.logIn(this, loginOptions);\n    }\n\n    /**\n     * Wrap the default save behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Promise}\n     */\n  }, {\n    key: \"save\",\n    value: function () {\n      var _save = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var _len,\n          args,\n          _key4,\n          current,\n          _args2 = arguments;\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              for (_len = _args2.length, args = new Array(_len), _key4 = 0; _key4 < _len; _key4++) {\n                args[_key4] = _args2[_key4];\n              }\n              _context2.next = 3;\n              return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"save\", this).apply(this, args);\n            case 3:\n              _context2.next = 5;\n              return this.isCurrentAsync();\n            case 5:\n              current = _context2.sent;\n              if (!current) {\n                _context2.next = 8;\n                break;\n              }\n              return _context2.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n            case 8:\n              return _context2.abrupt(\"return\", this);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function save() {\n        return _save.apply(this, arguments);\n      }\n      return save;\n    }()\n    /**\n     * Wrap the default destroy behavior with functionality that logs out\n     * the current user when it is destroyed\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"destroy\",\n    value: function () {\n      var _destroy = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var _len2,\n          args,\n          _key5,\n          current,\n          _args3 = arguments;\n        return _regenerator.default.wrap(function (_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              for (_len2 = _args3.length, args = new Array(_len2), _key5 = 0; _key5 < _len2; _key5++) {\n                args[_key5] = _args3[_key5];\n              }\n              _context3.next = 3;\n              return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"destroy\", this).apply(this, args);\n            case 3:\n              _context3.next = 5;\n              return this.isCurrentAsync();\n            case 5:\n              current = _context3.sent;\n              if (!current) {\n                _context3.next = 8;\n                break;\n              }\n              return _context3.abrupt(\"return\", _CoreManager.default.getUserController().removeUserFromDisk());\n            case 8:\n              return _context3.abrupt(\"return\", this);\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function destroy() {\n        return _destroy.apply(this, arguments);\n      }\n      return destroy;\n    }()\n    /**\n     * Wrap the default fetch behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4() {\n        var _len3,\n          args,\n          _key6,\n          current,\n          _args4 = arguments;\n        return _regenerator.default.wrap(function (_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              for (_len3 = _args4.length, args = new Array(_len3), _key6 = 0; _key6 < _len3; _key6++) {\n                args[_key6] = _args4[_key6];\n              }\n              _context4.next = 3;\n              return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetch\", this).apply(this, args);\n            case 3:\n              _context4.next = 5;\n              return this.isCurrentAsync();\n            case 5:\n              current = _context4.sent;\n              if (!current) {\n                _context4.next = 8;\n                break;\n              }\n              return _context4.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n            case 8:\n              return _context4.abrupt(\"return\", this);\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n      return fetch;\n    }()\n    /**\n     * Wrap the default fetchWithInclude behavior with functionality to save to local\n     * storage if this is current user.\n     *\n     * @param {...any} args\n     * @returns {Parse.User}\n     */\n  }, {\n    key: \"fetchWithInclude\",\n    value: function () {\n      var _fetchWithInclude = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5() {\n        var _len4,\n          args,\n          _key7,\n          current,\n          _args5 = arguments;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              for (_len4 = _args5.length, args = new Array(_len4), _key7 = 0; _key7 < _len4; _key7++) {\n                args[_key7] = _args5[_key7];\n              }\n              _context5.next = 3;\n              return (0, _get2.default)((0, _getPrototypeOf2.default)(ParseUser.prototype), \"fetchWithInclude\", this).apply(this, args);\n            case 3:\n              _context5.next = 5;\n              return this.isCurrentAsync();\n            case 5:\n              current = _context5.sent;\n              if (!current) {\n                _context5.next = 8;\n                break;\n              }\n              return _context5.abrupt(\"return\", _CoreManager.default.getUserController().updateUserOnDisk(this));\n            case 8:\n              return _context5.abrupt(\"return\", this);\n            case 9:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function fetchWithInclude() {\n        return _fetchWithInclude.apply(this, arguments);\n      }\n      return fetchWithInclude;\n    }()\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n  }, {\n    key: \"verifyPassword\",\n    value: function (password /*: string*/, options /*:: ?: RequestOptions*/) /*: Promise<ParseUser>*/{\n      var username = this.getUsername() || '';\n      return ParseUser.verifyPassword(username, password, options);\n    }\n  }], [{\n    key: \"readOnlyAttributes\",\n    value: function () {\n      return ['sessionToken'];\n    }\n\n    /**\n     * Adds functionality to the existing Parse.User class.\n     *\n     * @param {object} protoProps A set of properties to add to the prototype\n     * @param {object} classProps A set of static properties to add to the class\n     * @static\n     * @returns {Parse.User} The newly extended Parse.User class\n     */\n  }, {\n    key: \"extend\",\n    value: function (protoProps /*: { [prop: string]: any }*/, classProps /*: { [prop: string]: any }*/) {\n      if (protoProps) {\n        for (var _prop in protoProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty.default)(ParseUser.prototype, _prop, {\n              value: protoProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      if (classProps) {\n        for (var _prop2 in classProps) {\n          if (_prop2 !== 'className') {\n            (0, _defineProperty.default)(ParseUser, _prop2, {\n              value: classProps[_prop2],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n      return ParseUser;\n    }\n\n    /**\n     * Retrieves the currently logged in ParseUser with a valid session,\n     * either from memory or localStorage, if necessary.\n     *\n     * @static\n     * @returns {Parse.Object} The currently logged in Parse.User.\n     */\n  }, {\n    key: \"current\",\n    value: function () /*: ?ParseUser*/{\n      if (!canUseCurrentUser) {\n        return null;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.currentUser();\n    }\n\n    /**\n     * Retrieves the currently logged in ParseUser from asynchronous Storage.\n     *\n     * @static\n     * @returns {Promise} A Promise that is resolved with the currently\n     *   logged in Parse User\n     */\n  }, {\n    key: \"currentAsync\",\n    value: function () /*: Promise<?ParseUser>*/{\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(null);\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.currentUserAsync();\n    }\n\n    /**\n     * Signs up a new user with a username (or email) and password.\n     * This will create a new Parse.User on the server, and also persist the\n     * session in localStorage so that you can access the user using\n     * {@link #current}.\n     *\n     * @param {string} username The username (or email) to sign up with.\n     * @param {string} password The password to sign up with.\n     * @param {object} attrs Extra fields to set on the new user.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the signup completes.\n     */\n  }, {\n    key: \"signUp\",\n    value: function (username /*: string*/, password /*: string*/, attrs /*: AttributeMap*/, options /*:: ?: FullOptions*/) {\n      attrs = attrs || {};\n      attrs.username = username;\n      attrs.password = password;\n      var user = new this(attrs);\n      return user.signUp({}, options);\n    }\n\n    /**\n     * Logs in a user with a username (or email) and password. On success, this\n     * saves the session to disk, so you can retrieve the currently logged in\n     * user using <code>current</code>.\n     *\n     * @param {string} username The username (or email) to log in with.\n     * @param {string} password The password to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"logIn\",\n    value: function (username /*: string*/, password /*: string*/, options /*:: ?: FullOptions*/) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      } else if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n      var user = new this();\n      user._finishFetch({\n        username: username,\n        password: password\n      });\n      return user.logIn(options);\n    }\n\n    /**\n     * Logs in a user with an objectId. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} userId The objectId for the user.\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"loginAs\",\n    value: function (userId /*: string*/) {\n      if (!userId) {\n        throw new _ParseError.default(_ParseError.default.USERNAME_MISSING, 'Cannot log in as user with an empty user id');\n      }\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.loginAs(user, userId);\n    }\n\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>.\n     *\n     * @param {string} sessionToken The sessionToken to log in with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"become\",\n    value: function (sessionToken /*: string*/, options /*:: ?: RequestOptions*/) {\n      if (!canUseCurrentUser) {\n        throw new Error('It is not memory-safe to become a user in a server environment');\n      }\n      options = options || {};\n      var becomeOptions /*: RequestOptions*/ = {\n        sessionToken: sessionToken\n      };\n      if (options.hasOwnProperty('useMasterKey')) {\n        becomeOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.become(user, becomeOptions);\n    }\n\n    /**\n     * Retrieves a user with a session token.\n     *\n     * @param {string} sessionToken The sessionToken to get user with.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user is fetched.\n     */\n  }, {\n    key: \"me\",\n    value: function (sessionToken /*: string*/) {\n      var options /*:: ?: RequestOptions*/ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var controller = _CoreManager.default.getUserController();\n      var meOptions /*: RequestOptions*/ = {\n        sessionToken: sessionToken\n      };\n      if (options.useMasterKey) {\n        meOptions.useMasterKey = options.useMasterKey;\n      }\n      var user = new this();\n      return controller.me(user, meOptions);\n    }\n\n    /**\n     * Logs in a user with a session token. On success, this saves the session\n     * to disk, so you can retrieve the currently logged in user using\n     * <code>current</code>. If there is no session token the user will not logged in.\n     *\n     * @param {object} userJSON The JSON map of the User's data\n     * @static\n     * @returns {Promise} A promise that is fulfilled with the user when\n     *     the login completes.\n     */\n  }, {\n    key: \"hydrate\",\n    value: function (userJSON /*: AttributeMap*/) {\n      var controller = _CoreManager.default.getUserController();\n      var user = new this();\n      return controller.hydrate(user, userJSON);\n    }\n\n    /**\n     * Static version of {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith}\n     *\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"logInWith\",\n    value: function (provider /*: any*/, options /*: { authData?: AuthData }*/, saveOpts /*:: ?: FullOptions*/) /*: Promise<ParseUser>*/{\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n\n    /**\n     * Logs out the currently logged in user session. This will remove the\n     * session from disk, log out of linked services, and future calls to\n     * <code>current</code> will return <code>null</code>.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the session is\n     *   destroyed on the server.\n     */\n  }, {\n    key: \"logOut\",\n    value: function () {\n      var options /*: RequestOptions*/ = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var controller = _CoreManager.default.getUserController();\n      return controller.logOut(options);\n    }\n\n    /**\n     * Requests a password reset email to be sent to the specified email address\n     * associated with the user account. This email allows the user to securely\n     * reset their password on the Parse site.\n     *\n     * @param {string} email The email address associated with the user that\n     *     forgot their password.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"requestPasswordReset\",\n    value: function (email /*: string*/, options /*:: ?: RequestOptions*/) {\n      options = options || {};\n      var requestOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.requestPasswordReset(email, requestOptions);\n    }\n\n    /**\n     * Request an email verification.\n     *\n     * @param {string} email The email address associated with the user that\n     *     needs to verify their email.\n     * @param {object} options\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"requestEmailVerification\",\n    value: function (email /*: string*/, options /*:: ?: RequestOptions*/) {\n      options = options || {};\n      var requestOptions = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        requestOptions.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.requestEmailVerification(email, requestOptions);\n    }\n\n    /**\n     * Verify whether a given password is the password of the current user.\n     *\n     * @param {string} username  A username to be used for identificaiton\n     * @param {string} password A password to be verified\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled with a user\n     *  when the password is correct.\n     */\n  }, {\n    key: \"verifyPassword\",\n    value: function (username /*: string*/, password /*: string*/, options /*:: ?: RequestOptions*/) {\n      if (typeof username !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Username must be a string.'));\n      }\n      if (typeof password !== 'string') {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Password must be a string.'));\n      }\n      options = options || {};\n      var verificationOption = {};\n      if (options.hasOwnProperty('useMasterKey')) {\n        verificationOption.useMasterKey = options.useMasterKey;\n      }\n      var controller = _CoreManager.default.getUserController();\n      return controller.verifyPassword(username, password, verificationOption);\n    }\n\n    /**\n     * Allow someone to define a custom User class without className\n     * being rewritten to _User. The default behavior is to rewrite\n     * User to _User for legacy reasons. This allows developers to\n     * override that behavior.\n     *\n     * @param {boolean} isAllowed Whether or not to allow custom User class\n     * @static\n     */\n  }, {\n    key: \"allowCustomUserClass\",\n    value: function (isAllowed /*: boolean*/) {\n      _CoreManager.default.set('PERFORM_USER_REWRITE', !isAllowed);\n    }\n\n    /**\n     * Allows a legacy application to start using revocable sessions. If the\n     * current session token is not revocable, a request will be made for a new,\n     * revocable session.\n     * It is not necessary to call this method from cloud code unless you are\n     * handling user signup or login from the server side. In a cloud code call,\n     * this function will not attempt to upgrade the current token.\n     *\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is resolved when the process has\n     *   completed. If a replacement session token is requested, the promise\n     *   will be resolved after a new token has been fetched.\n     */\n  }, {\n    key: \"enableRevocableSession\",\n    value: function (options /*:: ?: RequestOptions*/) {\n      options = options || {};\n      _CoreManager.default.set('FORCE_REVOCABLE_SESSION', true);\n      if (canUseCurrentUser) {\n        var current = ParseUser.current();\n        if (current) {\n          return current._upgradeToRevocableSession(options);\n        }\n      }\n      return _promise.default.resolve();\n    }\n\n    /**\n     * Enables the use of become or the current user in a server\n     * environment. These features are disabled by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n  }, {\n    key: \"enableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = true;\n    }\n\n    /**\n     * Disables the use of become or the current user in any environment.\n     * These features are disabled on servers by default, since they depend on\n     * global objects that are not memory-safe for most servers.\n     *\n     * @static\n     */\n  }, {\n    key: \"disableUnsafeCurrentUser\",\n    value: function () {\n      canUseCurrentUser = false;\n    }\n\n    /**\n     * When registering users with {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#linkWith linkWith} a basic auth provider\n     * is automatically created for you.\n     *\n     * For advanced authentication, you can register an Auth provider to\n     * implement custom authentication, deauthentication.\n     *\n     * @param provider\n     * @see {@link https://parseplatform.org/Parse-SDK-JS/api/master/AuthProvider.html AuthProvider}\n     * @see {@link https://docs.parseplatform.org/js/guide/#custom-authentication-module Custom Authentication Module}\n     * @static\n     */\n  }, {\n    key: \"_registerAuthenticationProvider\",\n    value: function (provider /*: any*/) {\n      authProviders[provider.getAuthType()] = provider;\n      // Synchronize the current user with the auth provider.\n      ParseUser.currentAsync().then(function (current) {\n        if (current) {\n          current._synchronizeAuthData(provider.getAuthType());\n        }\n      });\n    }\n\n    /**\n     * @param provider\n     * @param options\n     * @param saveOpts\n     * @deprecated since 2.9.0 see {@link https://parseplatform.org/Parse-SDK-JS/api/master/Parse.User.html#logInWith logInWith}\n     * @static\n     * @returns {Promise}\n     */\n  }, {\n    key: \"_logInWith\",\n    value: function (provider /*: any*/, options /*: { authData?: AuthData }*/, saveOpts /*:: ?: FullOptions*/) {\n      var user = new this();\n      return user.linkWith(provider, options, saveOpts);\n    }\n  }, {\n    key: \"_clearCache\",\n    value: function () {\n      currentUserCache = null;\n      currentUserCacheMatchesDisk = false;\n    }\n  }, {\n    key: \"_setCurrentUserCache\",\n    value: function (user /*: ParseUser*/) {\n      currentUserCache = user;\n    }\n  }]);\n  return ParseUser;\n}(_ParseObject2.default);\n_ParseObject2.default.registerSubclass('_User', ParseUser);\nvar DefaultController = {\n  updateUserOnDisk: function (user) {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    var json = user.toJSON();\n    delete json.password;\n    json.className = '_User';\n    var userData = (0, _stringify.default)(json);\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n      userData = crypto.encrypt(json, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n    return _Storage.default.setItemAsync(path, userData).then(function () {\n      return user;\n    });\n  },\n  removeUserFromDisk: function () {\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    currentUserCacheMatchesDisk = true;\n    currentUserCache = null;\n    return _Storage.default.removeItemAsync(path);\n  },\n  setCurrentUser: function (user) {\n    currentUserCache = user;\n    user._cleanupAuthData();\n    user._synchronizeAllAuthData();\n    return DefaultController.updateUserOnDisk(user);\n  },\n  currentUser: function () /*: ?ParseUser*/{\n    if (currentUserCache) {\n      return currentUserCache;\n    }\n    if (currentUserCacheMatchesDisk) {\n      return null;\n    }\n    if (_Storage.default.async()) {\n      throw new Error('Cannot call currentUser() when using a platform with an async ' + 'storage system. Call currentUserAsync() instead.');\n    }\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    var userData = _Storage.default.getItem(path);\n    currentUserCacheMatchesDisk = true;\n    if (!userData) {\n      currentUserCache = null;\n      return null;\n    }\n    if (_CoreManager.default.get('ENCRYPTED_USER')) {\n      var crypto = _CoreManager.default.getCryptoController();\n      userData = crypto.decrypt(userData, _CoreManager.default.get('ENCRYPTED_KEY'));\n    }\n    userData = JSON.parse(userData);\n    if (!userData.className) {\n      userData.className = '_User';\n    }\n    if (userData._id) {\n      if (userData.objectId !== userData._id) {\n        userData.objectId = userData._id;\n      }\n      delete userData._id;\n    }\n    if (userData._sessionToken) {\n      userData.sessionToken = userData._sessionToken;\n      delete userData._sessionToken;\n    }\n    var current = _ParseObject2.default.fromJSON(userData);\n    currentUserCache = current;\n    current._synchronizeAllAuthData();\n    return current;\n  },\n  currentUserAsync: function () /*: Promise<?ParseUser>*/{\n    if (currentUserCache) {\n      return _promise.default.resolve(currentUserCache);\n    }\n    if (currentUserCacheMatchesDisk) {\n      return _promise.default.resolve(null);\n    }\n    var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n    return _Storage.default.getItemAsync(path).then(function (userData) {\n      currentUserCacheMatchesDisk = true;\n      if (!userData) {\n        currentUserCache = null;\n        return _promise.default.resolve(null);\n      }\n      if (_CoreManager.default.get('ENCRYPTED_USER')) {\n        var crypto = _CoreManager.default.getCryptoController();\n        userData = crypto.decrypt(userData.toString(), _CoreManager.default.get('ENCRYPTED_KEY'));\n      }\n      userData = JSON.parse(userData);\n      if (!userData.className) {\n        userData.className = '_User';\n      }\n      if (userData._id) {\n        if (userData.objectId !== userData._id) {\n          userData.objectId = userData._id;\n        }\n        delete userData._id;\n      }\n      if (userData._sessionToken) {\n        userData.sessionToken = userData._sessionToken;\n        delete userData._sessionToken;\n      }\n      var current = _ParseObject2.default.fromJSON(userData);\n      currentUserCache = current;\n      current._synchronizeAllAuthData();\n      return _promise.default.resolve(current);\n    });\n  },\n  signUp: function (user /*: ParseUser*/, attrs /*: AttributeMap*/, options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var username = attrs && attrs.username || user.get('username');\n    var password = attrs && attrs.password || user.get('password');\n    if (!username || !username.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty username.'));\n    }\n    if (!password || !password.length) {\n      return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Cannot sign up user with an empty password.'));\n    }\n    return user.save(attrs, options).then(function () {\n      // Clear the password field\n      user._finishFetch({\n        password: undefined\n      });\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return user;\n    });\n  },\n  logIn: function (user /*: ParseUser*/, options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    var stateController = _CoreManager.default.getObjectStateController();\n    var auth = {\n      username: user.get('username'),\n      password: user.get('password')\n    };\n    return RESTController.request(options.usePost ? 'POST' : 'GET', 'login', auth, options).then(function (response) {\n      user._migrateId(response.objectId);\n      user._setExisted(true);\n      stateController.setPendingOp(user._getStateIdentifier(), 'username', undefined);\n      stateController.setPendingOp(user._getStateIdentifier(), 'password', undefined);\n      response.password = undefined;\n      user._finishFetch(response);\n      if (!canUseCurrentUser) {\n        // We can't set the current user, so just return the one we logged in\n        return _promise.default.resolve(user);\n      }\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  loginAs: function (user /*: ParseUser*/, userId /*: string*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'loginAs', {\n      userId: userId\n    }, {\n      useMasterKey: true\n    }).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      if (!canUseCurrentUser) {\n        return _promise.default.resolve(user);\n      }\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  become: function (user /*: ParseUser*/, options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      return DefaultController.setCurrentUser(user);\n    });\n  },\n  hydrate: function (user /*: ParseUser*/, userJSON /*: AttributeMap*/) /*: Promise<ParseUser>*/{\n    user._finishFetch(userJSON);\n    user._setExisted(true);\n    if (userJSON.sessionToken && canUseCurrentUser) {\n      return DefaultController.setCurrentUser(user);\n    } else {\n      return _promise.default.resolve(user);\n    }\n  },\n  me: function (user /*: ParseUser*/, options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'users/me', {}, options).then(function (response) {\n      user._finishFetch(response);\n      user._setExisted(true);\n      return user;\n    });\n  },\n  logOut: function (options /*: RequestOptions*/) /*: Promise<ParseUser>*/{\n    var RESTController = _CoreManager.default.getRESTController();\n    if (options.sessionToken) {\n      return RESTController.request('POST', 'logout', {}, options);\n    }\n    return DefaultController.currentUserAsync().then(function (currentUser) {\n      var path = _Storage.default.generatePath(CURRENT_USER_KEY);\n      var promise = _Storage.default.removeItemAsync(path);\n      if (currentUser !== null) {\n        var currentSession = currentUser.getSessionToken();\n        if (currentSession && (0, _isRevocableSession.default)(currentSession)) {\n          promise = promise.then(function () {\n            return RESTController.request('POST', 'logout', {}, {\n              sessionToken: currentSession\n            });\n          });\n        }\n        currentUser._logOutWithAll();\n        currentUser._finishFetch({\n          sessionToken: undefined\n        });\n      }\n      currentUserCacheMatchesDisk = true;\n      currentUserCache = null;\n      return promise;\n    });\n  },\n  requestPasswordReset: function (email /*: string*/, options /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'requestPasswordReset', {\n      email: email\n    }, options);\n  },\n  upgradeToRevocableSession: function (user /*: ParseUser*/, options /*: RequestOptions*/) {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n      var token, RESTController, result, session, current;\n      return _regenerator.default.wrap(function (_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            token = user.getSessionToken();\n            if (token) {\n              _context6.next = 3;\n              break;\n            }\n            return _context6.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.SESSION_MISSING, 'Cannot upgrade a user with no session token')));\n          case 3:\n            options.sessionToken = token;\n            RESTController = _CoreManager.default.getRESTController();\n            _context6.next = 7;\n            return RESTController.request('POST', 'upgradeToRevocableSession', {}, options);\n          case 7:\n            result = _context6.sent;\n            session = new _ParseSession.default();\n            session._finishFetch(result);\n            user._finishFetch({\n              sessionToken: session.getSessionToken()\n            });\n            _context6.next = 13;\n            return user.isCurrentAsync();\n          case 13:\n            current = _context6.sent;\n            if (!current) {\n              _context6.next = 16;\n              break;\n            }\n            return _context6.abrupt(\"return\", DefaultController.setCurrentUser(user));\n          case 16:\n            return _context6.abrupt(\"return\", _promise.default.resolve(user));\n          case 17:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, _callee6);\n    }))();\n  },\n  linkWith: function (user /*: ParseUser*/, authData /*: AuthData*/, options /*: FullOptions*/) {\n    return user.save({\n      authData: authData\n    }, options).then(function () {\n      if (canUseCurrentUser) {\n        return DefaultController.setCurrentUser(user);\n      }\n      return user;\n    });\n  },\n  verifyPassword: function (username /*: string*/, password /*: string*/, options /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('GET', 'verifyPassword', {\n      username: username,\n      password: password\n    }, options);\n  },\n  requestEmailVerification: function (email /*: string*/, options /*: RequestOptions*/) {\n    var RESTController = _CoreManager.default.getRESTController();\n    return RESTController.request('POST', 'verificationEmailRequest', {\n      email: email\n    }, options);\n  }\n};\n_CoreManager.default.setUserController(DefaultController);\nvar _default = ParseUser;\nexports.default = _default;"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,yDAAyD,CAAC;AAC3F,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,8DAA8D,CAAC;AACrG,IAAIE,sBAAsB,GAAGF,OAAO,CAAC,sDAAsD,CAAC;AAC5FC,uBAAuB,CAACE,OAAO,EAAE,YAAY,EAAE;EAC7CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,OAAO,GAAG,KAAK,CAAC;AACxB,IAAIC,YAAY,GAAGJ,sBAAsB,CAACF,OAAO,CAAC,oCAAoC,CAAC,CAAC;AACxF,IAAIO,QAAQ,GAAGL,sBAAsB,CAACF,OAAO,CAAC,+CAA+C,CAAC,CAAC;AAC/F,IAAIQ,eAAe,GAAGN,sBAAsB,CAACF,OAAO,CAAC,8DAA8D,CAAC,CAAC;AACrH,IAAIS,UAAU,GAAGP,sBAAsB,CAACF,OAAO,CAAC,sDAAsD,CAAC,CAAC;AACxG,IAAIU,kBAAkB,GAAGR,sBAAsB,CAACF,OAAO,CAAC,iDAAiD,CAAC,CAAC;AAC3G,IAAIW,QAAQ,GAAGT,sBAAsB,CAACF,OAAO,CAAC,uCAAuC,CAAC,CAAC;AACvF,IAAIY,gBAAgB,GAAGV,sBAAsB,CAACF,OAAO,CAAC,+CAA+C,CAAC,CAAC;AACvG,IAAIa,aAAa,GAAGX,sBAAsB,CAACF,OAAO,CAAC,4CAA4C,CAAC,CAAC;AACjG,IAAIc,KAAK,GAAGZ,sBAAsB,CAACF,OAAO,CAAC,oCAAoC,CAAC,CAAC;AACjF,IAAIe,UAAU,GAAGb,sBAAsB,CAACF,OAAO,CAAC,yCAAyC,CAAC,CAAC;AAC3F,IAAIgB,2BAA2B,GAAGd,sBAAsB,CAACF,OAAO,CAAC,0DAA0D,CAAC,CAAC;AAC7H,IAAIiB,gBAAgB,GAAGf,sBAAsB,CAACF,OAAO,CAAC,+CAA+C,CAAC,CAAC;AACvG,IAAIkB,YAAY,GAAGhB,sBAAsB,CAACF,OAAO,CAAC,eAAe,CAAC,CAAC;AACnE,IAAImB,mBAAmB,GAAGjB,sBAAsB,CAACF,OAAO,CAAC,sBAAsB,CAAC,CAAC;AACjF,IAAIoB,WAAW,GAAGlB,sBAAsB,CAACF,OAAO,CAAC,cAAc,CAAC,CAAC;AACjE,IAAIqB,aAAa,GAAGnB,sBAAsB,CAACF,OAAO,CAAC,eAAe,CAAC,CAAC;AACpE,IAAIsB,aAAa,GAAGpB,sBAAsB,CAACF,OAAO,CAAC,gBAAgB,CAAC,CAAC;AACrE,IAAIuB,QAAQ,GAAGrB,sBAAsB,CAACF,OAAO,CAAC,WAAW,CAAC,CAAC;AAC3D,SAASwB,YAAYA,CAACC,OAAO,EAAE;EAC7B,IAAIC,yBAAyB,GAAGC,yBAAyB,CAAC,CAAC;EAC3D,OAAO,YAAY;IACjB,IAAIC,KAAK,GAAG,CAAC,CAAC,EAAEX,gBAAgB,CAACZ,OAAO,EAAEoB,OAAO,CAAC;MAChDI,MAAM;IACR,IAAIH,yBAAyB,EAAE;MAC7B,IAAII,SAAS,GAAG,CAAC,CAAC,EAAEb,gBAAgB,CAACZ,OAAO,EAAE,IAAI,CAAC,CAAC0B,WAAW;MAC/DF,MAAM,GAAG9B,kBAAkB,CAAC6B,KAAK,EAAEI,SAAS,EAAEF,SAAS,CAAC;IAC1D,CAAC,MAAM;MACLD,MAAM,GAAGD,KAAK,CAACK,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;IACvC;IACA,OAAO,CAAC,CAAC,EAAEhB,2BAA2B,CAACX,OAAO,EAAE,IAAI,EAAEwB,MAAM,CAAC;EAC/D,CAAC;AACH;AACA,SAASF,yBAAyBA,CAAA,EAAG;EACnC,IAAI,OAAOO,OAAO,KAAK,WAAW,IAAI,CAACnC,kBAAkB,EAAE,OAAO,KAAK;EACvE,IAAIA,kBAAkB,CAACoC,IAAI,EAAE,OAAO,KAAK;EACzC,IAAI,OAAOC,KAAK,KAAK,UAAU,EAAE,OAAO,IAAI;EAC5C,IAAI;IACFC,OAAO,CAACC,SAAS,CAACC,OAAO,CAACC,IAAI,CAACzC,kBAAkB,CAACsC,OAAO,EAAE,EAAE,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;IAC/E,OAAO,IAAI;EACb,CAAC,CAAC,OAAOI,CAAC,EAAE;IACV,OAAO,KAAK;EACd;AACF,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA,IAAIC,gBAAgB,GAAG,aAAa;AACpC,IAAIC,iBAAiB,GAAG,CAACzB,YAAY,CAACb,OAAO,CAACuC,GAAG,CAAC,SAAS,CAAC;AAC5D,IAAIC,2BAA2B,GAAG,KAAK;AACvC,IAAIC,gBAAgB,GAAG,IAAI;AAC3B,IAAIC,aAAa,GAAG,CAAC,CAAC;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,SAAS,GAAG,aAAa,UAAUC,YAAY,EAAE;EACnD,CAAC,CAAC,EAAElC,UAAU,CAACV,OAAO,EAAE2C,SAAS,EAAEC,YAAY,CAAC;EAChD,IAAIC,MAAM,GAAG1B,YAAY,CAACwB,SAAS,CAAC;EACpC;AACF;AACA;EACE,SAASA,SAASA,CAACG,UAAU,CAAC,qBAAqB;IACjD,IAAIC,KAAK;IACT,CAAC,CAAC,EAAExC,gBAAgB,CAACP,OAAO,EAAE,IAAI,EAAE2C,SAAS,CAAC;IAC9CI,KAAK,GAAGF,MAAM,CAACV,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IAClC,IAAIW,UAAU,IAAI,CAAC,CAAC,EAAExC,QAAQ,CAACN,OAAO,EAAE8C,UAAU,CAAC,KAAK,QAAQ,EAAE;MAChE,IAAI,CAACC,KAAK,CAACC,GAAG,CAACF,UAAU,IAAI,CAAC,CAAC,CAAC,EAAE;QAChC,MAAM,IAAIG,KAAK,CAAC,oCAAoC,CAAC;MACvD;IACF;IACA,OAAOF,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,CAAC,EAAEvC,aAAa,CAACR,OAAO,EAAE2C,SAAS,EAAE,CAAC;IACrCO,GAAG,EAAE,4BAA4B;IACjCnD,KAAK,EAAE,SAAAA,CAAUoD,OAAO,CAAC,sBAAsB,mBAAmB;MAChEA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAIC,cAAc,GAAG,CAAC,CAAC;MACvB,IAAID,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1CD,cAAc,CAACE,YAAY,GAAGH,OAAO,CAACG,YAAY;MACpD;MACA,IAAIC,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAACE,yBAAyB,CAAC,IAAI,EAAEL,cAAc,CAAC;IACnE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDF,GAAG,EAAE,UAAU;IACfnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,WAAWP,OAAO,CAAC,+BAA+B,wBAAwB;MAClG,IAAIQ,MAAM,GAAG,IAAI;MACjB,IAAIC,QAAQ,CAAC,wBAAwBjC,SAAS,CAACkC,MAAM,GAAG,CAAC,IAAIlC,SAAS,CAAC,CAAC,CAAC,KAAKmC,SAAS,GAAGnC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3GiC,QAAQ,CAACG,YAAY,GAAGH,QAAQ,CAACG,YAAY,IAAI,IAAI,CAACC,eAAe,CAAC,CAAC,IAAI,EAAE;MAC7E,IAAIC,QAAQ;MACZ,IAAI,OAAOP,QAAQ,KAAK,QAAQ,EAAE;QAChCO,QAAQ,GAAGP,QAAQ;QACnB,IAAIhB,aAAa,CAACgB,QAAQ,CAAC,EAAE;UAC3BA,QAAQ,GAAGhB,aAAa,CAACgB,QAAQ,CAAC;QACpC,CAAC,MAAM;UACL,IAAIQ,YAAY,GAAG;YACjBC,qBAAqB,EAAE,SAAAA,CAAA,EAAY;cACjC,OAAO,IAAI;YACb,CAAC;YACDC,WAAW,EAAE,SAAAA,CAAA,EAAY;cACvB,OAAOH,QAAQ;YACjB;UACF,CAAC;UACDvB,aAAa,CAACwB,YAAY,CAACE,WAAW,CAAC,CAAC,CAAC,GAAGF,YAAY;UACxDR,QAAQ,GAAGQ,YAAY;QACzB;MACF,CAAC,MAAM;QACLD,QAAQ,GAAGP,QAAQ,CAACU,WAAW,CAAC,CAAC;MACnC;MACA,IAAIjB,OAAO,IAAIA,OAAO,CAACE,cAAc,CAAC,UAAU,CAAC,EAAE;QACjD,IAAIgB,QAAQ,GAAG,IAAI,CAAC9B,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,CAAC,EAAEjC,QAAQ,CAACN,OAAO,EAAEqE,QAAQ,CAAC,KAAK,QAAQ,EAAE;UAChD,MAAM,IAAIpB,KAAK,CAAC,kDAAkD,CAAC;QACrE;QACAoB,QAAQ,CAACJ,QAAQ,CAAC,GAAGd,OAAO,CAACkB,QAAQ;QACrC,IAAId,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;QACzD,OAAOD,UAAU,CAACe,QAAQ,CAAC,IAAI,EAAED,QAAQ,EAAET,QAAQ,CAAC;MACtD,CAAC,MAAM;QACL,OAAO,IAAI1D,QAAQ,CAACF,OAAO,CAAC,UAAUuE,OAAO,EAAEC,MAAM,EAAE;UACrDd,QAAQ,CAACe,YAAY,CAAC;YACpBC,OAAO,EAAE,SAAAA,CAAUhB,QAAQ,EAAElC,MAAM,EAAE;cACnC,IAAImD,IAAI,GAAG,CAAC,CAAC;cACbA,IAAI,CAACN,QAAQ,GAAG7C,MAAM;cACtBmC,MAAM,CAACW,QAAQ,CAACZ,QAAQ,EAAEiB,IAAI,EAAEf,QAAQ,CAAC,CAACgB,IAAI,CAAC,YAAY;gBACzDL,OAAO,CAACZ,MAAM,CAAC;cACjB,CAAC,EAAE,UAAUkB,KAAK,EAAE;gBAClBL,MAAM,CAACK,KAAK,CAAC;cACf,CAAC,CAAC;YACJ,CAAC;YACDA,KAAK,EAAE,SAAAA,CAAUnB,QAAQ,EAAEoB,MAAM,EAAE;cACjCN,MAAM,CAACM,MAAM,CAAC;YAChB;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD5B,GAAG,EAAE,WAAW;IAChBnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,WAAWP,OAAO,CAAC,+BAA+B,wBAAwB;MAClG,IAAIS,QAAQ,CAAC,wBAAwBjC,SAAS,CAACkC,MAAM,GAAG,CAAC,IAAIlC,SAAS,CAAC,CAAC,CAAC,KAAKmC,SAAS,GAAGnC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAC3G,OAAO,IAAI,CAAC2C,QAAQ,CAACZ,QAAQ,EAAEP,OAAO,EAAES,QAAQ,CAAC;IACnD;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDV,GAAG,EAAE,sBAAsB;IAC3BnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,cAAc;MACtC,IAAI,CAAC,IAAI,CAACqB,SAAS,CAAC,CAAC,IAAI,CAACrB,QAAQ,EAAE;QAClC;MACF;MACA,IAAIO,QAAQ;MACZ,IAAI,OAAOP,QAAQ,KAAK,QAAQ,EAAE;QAChCO,QAAQ,GAAGP,QAAQ;QACnBA,QAAQ,GAAGhB,aAAa,CAACuB,QAAQ,CAAC;MACpC,CAAC,MAAM;QACLA,QAAQ,GAAGP,QAAQ,CAACU,WAAW,CAAC,CAAC;MACnC;MACA,IAAIC,QAAQ,GAAG,IAAI,CAAC9B,GAAG,CAAC,UAAU,CAAC;MACnC,IAAI,CAACmB,QAAQ,IAAI,CAACW,QAAQ,IAAI,CAAC,CAAC,EAAE/D,QAAQ,CAACN,OAAO,EAAEqE,QAAQ,CAAC,KAAK,QAAQ,EAAE;QAC1E;MACF;MACA,IAAIK,OAAO,GAAGhB,QAAQ,CAACS,qBAAqB,CAACE,QAAQ,CAACJ,QAAQ,CAAC,CAAC;MAChE,IAAI,CAACS,OAAO,EAAE;QACZ,IAAI,CAACM,WAAW,CAACtB,QAAQ,CAAC;MAC5B;IACF;;IAEA;AACJ;AACA;EACE,CAAC,EAAE;IACDR,GAAG,EAAE,yBAAyB;IAC9BnD,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,IAAIsE,QAAQ,GAAG,IAAI,CAAC9B,GAAG,CAAC,UAAU,CAAC;MACnC,IAAI,CAAC,CAAC,EAAEjC,QAAQ,CAACN,OAAO,EAAEqE,QAAQ,CAAC,KAAK,QAAQ,EAAE;QAChD;MACF;MACA,KAAK,IAAIY,IAAI,IAAIZ,QAAQ,EAAE;QACzB,IAAI,CAACa,oBAAoB,CAACD,IAAI,CAAC;MACjC;IACF;;IAEA;AACJ;AACA;EACE,CAAC,EAAE;IACD/B,GAAG,EAAE,kBAAkB;IACvBnD,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,IAAI,CAAC,IAAI,CAACgF,SAAS,CAAC,CAAC,EAAE;QACrB;MACF;MACA,IAAIV,QAAQ,GAAG,IAAI,CAAC9B,GAAG,CAAC,UAAU,CAAC;MACnC,IAAI,CAAC,CAAC,EAAEjC,QAAQ,CAACN,OAAO,EAAEqE,QAAQ,CAAC,KAAK,QAAQ,EAAE;QAChD;MACF;MACA,KAAK,IAAIc,KAAK,IAAId,QAAQ,EAAE;QAC1B,IAAI,CAACA,QAAQ,CAACc,KAAK,CAAC,EAAE;UACpB,OAAOd,QAAQ,CAACc,KAAK,CAAC;QACxB;MACF;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDjC,GAAG,EAAE,aAAa;IAClBnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,WAAWP,OAAO,CAAC,uBAAuB,wBAAwB;MAC1F,IAAIiC,MAAM,GAAG,IAAI;MACjB,OAAO,IAAI,CAACd,QAAQ,CAACZ,QAAQ,EAAE;QAC7BW,QAAQ,EAAE;MACZ,CAAC,EAAElB,OAAO,CAAC,CAACyB,IAAI,CAAC,YAAY;QAC3BQ,MAAM,CAACF,oBAAoB,CAACxB,QAAQ,CAAC;QACrC,OAAOxD,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAACa,MAAM,CAAC;MACzC,CAAC,CAAC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDlC,GAAG,EAAE,WAAW;IAChBnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,WAAW,aAAa;MAChD,IAAIO,QAAQ;MACZ,IAAI,OAAOP,QAAQ,KAAK,QAAQ,EAAE;QAChCO,QAAQ,GAAGP,QAAQ;MACrB,CAAC,MAAM;QACLO,QAAQ,GAAGP,QAAQ,CAACU,WAAW,CAAC,CAAC;MACnC;MACA,IAAIC,QAAQ,GAAG,IAAI,CAAC9B,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;MACzC,IAAI,CAAC,CAAC,EAAEjC,QAAQ,CAACN,OAAO,EAAEqE,QAAQ,CAAC,KAAK,QAAQ,EAAE;QAChD,OAAO,KAAK;MACd;MACA,OAAO,CAAC,CAACA,QAAQ,CAACJ,QAAQ,CAAC;IAC7B;;IAEA;AACJ;AACA;EACE,CAAC,EAAE;IACDf,GAAG,EAAE,gBAAgB;IACrBnD,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,IAAIsE,QAAQ,GAAG,IAAI,CAAC9B,GAAG,CAAC,UAAU,CAAC;MACnC,IAAI,CAAC,CAAC,EAAEjC,QAAQ,CAACN,OAAO,EAAEqE,QAAQ,CAAC,KAAK,QAAQ,EAAE;QAChD;MACF;MACA,KAAK,IAAIgB,KAAK,IAAIhB,QAAQ,EAAE;QAC1B,IAAI,CAACiB,WAAW,CAACD,KAAK,CAAC;MACzB;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDnC,GAAG,EAAE,aAAa;IAClBnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,WAAW;MACnC,IAAI,CAAC,IAAI,CAACqB,SAAS,CAAC,CAAC,EAAE;QACrB;MACF;MACA,IAAI,OAAOrB,QAAQ,KAAK,QAAQ,EAAE;QAChCA,QAAQ,GAAGhB,aAAa,CAACgB,QAAQ,CAAC;MACpC;MACA,IAAIA,QAAQ,IAAIA,QAAQ,CAAC6B,cAAc,EAAE;QACvC7B,QAAQ,CAAC6B,cAAc,CAAC,CAAC;MAC3B;IACF;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDrC,GAAG,EAAE,wBAAwB;IAC7BnD,KAAK,EAAE,SAAAA,CAAA,EAAY,kBAAkB;MACnC,OAAO;QACLgE,YAAY,EAAE,IAAI,CAACxB,GAAG,CAAC,cAAc;MACvC,CAAC;IACH;;IAEA;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDW,GAAG,EAAE,WAAW;IAChBnD,KAAK,EAAE,SAAAA,CAAA,EAAY,aAAa;MAC9B,IAAIyF,OAAO,GAAG7C,SAAS,CAAC6C,OAAO,CAAC,CAAC;MACjC,OAAO,CAAC,CAACA,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAK,IAAI,CAACA,EAAE;IAC5C;;IAEA;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDvC,GAAG,EAAE,gBAAgB;IACrBnD,KAAK,EAAE,YAAY;MACjB,IAAI2F,eAAe,GAAG,CAAC,CAAC,EAAErF,kBAAkB,CAACL,OAAO,GAAG,aAAaC,YAAY,CAACD,OAAO,CAAC2F,IAAI,CAAC,SAASC,OAAOA,CAAA,EAAG;QAC/G,IAAIJ,OAAO;QACX,OAAOvF,YAAY,CAACD,OAAO,CAAC6F,IAAI,CAAC,UAAUC,QAAQ,EAAE;UACnD,OAAO,CAAC,EAAE,QAAQA,QAAQ,CAACC,IAAI,GAAGD,QAAQ,CAACE,IAAI;YAC7C,KAAK,CAAC;cACJF,QAAQ,CAACE,IAAI,GAAG,CAAC;cACjB,OAAOrD,SAAS,CAACsD,YAAY,CAAC,CAAC;YACjC,KAAK,CAAC;cACJT,OAAO,GAAGM,QAAQ,CAACI,IAAI;cACvB,OAAOJ,QAAQ,CAACK,MAAM,CAAC,QAAQ,EAAE,CAAC,CAACX,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAK,IAAI,CAACA,EAAE,CAAC;YACvE,KAAK,CAAC;YACN,KAAK,KAAK;cACR,OAAOK,QAAQ,CAACM,IAAI,CAAC,CAAC;UAC1B;QACF,CAAC,EAAER,OAAO,EAAE,IAAI,CAAC;MACnB,CAAC,CAAC,CAAC;MACH,SAASS,cAAcA,CAAA,EAAG;QACxB,OAAOX,eAAe,CAAC9D,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;MAC/C;MACA,OAAO0E,cAAc;IACvB,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDnD,GAAG,EAAE,aAAa;IAClBnD,KAAK,EAAE,SAAAA,CAAA,EAAY,aAAa;MAC9B,IAAIuG,QAAQ,GAAG,IAAI,CAAC/D,GAAG,CAAC,UAAU,CAAC;MACnC,IAAI+D,QAAQ,IAAI,IAAI,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QACpD,OAAOA,QAAQ;MACjB;MACA,OAAO,EAAE;IACX;;IAEA;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDpD,GAAG,EAAE,aAAa;IAClBnD,KAAK,EAAE,SAAAA,CAAUuG,QAAQ,CAAC,cAAc;MACtC;MACA,IAAIjC,QAAQ,GAAG,IAAI,CAAC9B,GAAG,CAAC,UAAU,CAAC;MACnC,IAAI8B,QAAQ,IAAI,CAAC,CAAC,EAAE/D,QAAQ,CAACN,OAAO,EAAEqE,QAAQ,CAAC,KAAK,QAAQ,IAAIA,QAAQ,CAAChB,cAAc,CAAC,WAAW,CAAC,EAAE;QACpG;QACAgB,QAAQ,CAACkC,SAAS,GAAG,IAAI;MAC3B;MACA,IAAI,CAACvD,GAAG,CAAC,UAAU,EAAEsD,QAAQ,CAAC;IAChC;;IAEA;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDpD,GAAG,EAAE,aAAa;IAClBnD,KAAK,EAAE,SAAAA,CAAUyG,QAAQ,CAAC,cAAc;MACtC,IAAI,CAACxD,GAAG,CAAC,UAAU,EAAEwD,QAAQ,CAAC;IAChC;;IAEA;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDtD,GAAG,EAAE,UAAU;IACfnD,KAAK,EAAE,SAAAA,CAAA,EAAY,aAAa;MAC9B,IAAI0G,KAAK,GAAG,IAAI,CAAClE,GAAG,CAAC,OAAO,CAAC;MAC7B,IAAIkE,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC9C,OAAOA,KAAK;MACd;MACA,OAAO,EAAE;IACX;;IAEA;AACJ;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDvD,GAAG,EAAE,UAAU;IACfnD,KAAK,EAAE,SAAAA,CAAU0G,KAAK,CAAC,cAAc;MACnC,OAAO,IAAI,CAACzD,GAAG,CAAC,OAAO,EAAEyD,KAAK,CAAC;IACjC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDvD,GAAG,EAAE,iBAAiB;IACtBnD,KAAK,EAAE,SAAAA,CAAA,EAAY,aAAa;MAC9B,IAAI2G,KAAK,GAAG,IAAI,CAACnE,GAAG,CAAC,cAAc,CAAC;MACpC,IAAImE,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC9C,OAAOA,KAAK;MACd;MACA,OAAO,EAAE;IACX;;IAEA;AACJ;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDxD,GAAG,EAAE,eAAe;IACpBnD,KAAK,EAAE,SAAAA,CAAA,EAAY,aAAa;MAC9B,IAAIyF,OAAO,GAAG7C,SAAS,CAAC6C,OAAO,CAAC,CAAC;MACjC,OAAO,CAAC,CAAC,IAAI,CAACjD,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAACiD,OAAO,IAAIA,OAAO,CAACC,EAAE,KAAK,IAAI,CAACA,EAAE;IAC1E;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDvC,GAAG,EAAE,QAAQ;IACbnD,KAAK,EAAE,SAAAA,CAAU4G,KAAK,CAAC,oBAAoBxD,OAAO,CAAC,uBAAuB,wBAAwB;MAChGA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAIyD,aAAa,GAAG,CAAC,CAAC;MACtB,IAAIzD,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1CuD,aAAa,CAACtD,YAAY,GAAGH,OAAO,CAACG,YAAY;MACnD;MACA,IAAIH,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;QAC5CuD,aAAa,CAACC,cAAc,GAAG1D,OAAO,CAAC0D,cAAc;MACvD;MACA,IAAI1D,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,IAAIyD,MAAM,CAAC7E,SAAS,CAAC8E,QAAQ,CAAC5E,IAAI,CAACgB,OAAO,CAAC6D,OAAO,CAAC,KAAK,iBAAiB,EAAE;QAC9GJ,aAAa,CAACI,OAAO,GAAG7D,OAAO,CAAC6D,OAAO;MACzC;MACA,IAAIzD,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAAC0D,MAAM,CAAC,IAAI,EAAEN,KAAK,EAAEC,aAAa,CAAC;IACtD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD1D,GAAG,EAAE,OAAO;IACZnD,KAAK,EAAE,SAAAA,CAAUoD,OAAO,CAAC,uBAAuB,wBAAwB;MACtEA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAI+D,YAAY,GAAG;QACjBC,OAAO,EAAE;MACX,CAAC;MACD,IAAIhE,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1C6D,YAAY,CAAC5D,YAAY,GAAGH,OAAO,CAACG,YAAY;MAClD;MACA,IAAIH,OAAO,CAACE,cAAc,CAAC,gBAAgB,CAAC,EAAE;QAC5C6D,YAAY,CAACL,cAAc,GAAG1D,OAAO,CAAC0D,cAAc;MACtD;MACA,IAAI1D,OAAO,CAACE,cAAc,CAAC,SAAS,CAAC,EAAE;QACrC6D,YAAY,CAACC,OAAO,GAAGhE,OAAO,CAACgE,OAAO;MACxC;MACA,IAAI5D,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAAC6D,KAAK,CAAC,IAAI,EAAEF,YAAY,CAAC;IAC7C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDhE,GAAG,EAAE,MAAM;IACXnD,KAAK,EAAE,YAAY;MACjB,IAAIsH,KAAK,GAAG,CAAC,CAAC,EAAEhH,kBAAkB,CAACL,OAAO,GAAG,aAAaC,YAAY,CAACD,OAAO,CAAC2F,IAAI,CAAC,SAAS2B,QAAQA,CAAA,EAAG;QACtG,IAAIC,IAAI;UACNC,IAAI;UACJC,KAAK;UACLjC,OAAO;UACPkC,MAAM,GAAG/F,SAAS;QACpB,OAAO1B,YAAY,CAACD,OAAO,CAAC6F,IAAI,CAAC,UAAU8B,SAAS,EAAE;UACpD,OAAO,CAAC,EAAE,QAAQA,SAAS,CAAC5B,IAAI,GAAG4B,SAAS,CAAC3B,IAAI;YAC/C,KAAK,CAAC;cACJ,KAAKuB,IAAI,GAAGG,MAAM,CAAC7D,MAAM,EAAE2D,IAAI,GAAG,IAAII,KAAK,CAACL,IAAI,CAAC,EAAEE,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,IAAI,EAAEE,KAAK,EAAE,EAAE;gBACnFD,IAAI,CAACC,KAAK,CAAC,GAAGC,MAAM,CAACD,KAAK,CAAC;cAC7B;cACAE,SAAS,CAAC3B,IAAI,GAAG,CAAC;cAClB,OAAO,CAAC,CAAC,EAAEvF,KAAK,CAACT,OAAO,EAAE,CAAC,CAAC,EAAEY,gBAAgB,CAACZ,OAAO,EAAE2C,SAAS,CAACV,SAAS,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAACL,KAAK,CAAC,IAAI,EAAE4F,IAAI,CAAC;YAC/G,KAAK,CAAC;cACJG,SAAS,CAAC3B,IAAI,GAAG,CAAC;cAClB,OAAO,IAAI,CAACK,cAAc,CAAC,CAAC;YAC9B,KAAK,CAAC;cACJb,OAAO,GAAGmC,SAAS,CAACzB,IAAI;cACxB,IAAI,CAACV,OAAO,EAAE;gBACZmC,SAAS,CAAC3B,IAAI,GAAG,CAAC;gBAClB;cACF;cACA,OAAO2B,SAAS,CAACxB,MAAM,CAAC,QAAQ,EAAEtF,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC,CAACqE,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACpG,KAAK,CAAC;cACJ,OAAOF,SAAS,CAACxB,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;YACzC,KAAK,CAAC;YACN,KAAK,KAAK;cACR,OAAOwB,SAAS,CAACvB,IAAI,CAAC,CAAC;UAC3B;QACF,CAAC,EAAEkB,QAAQ,EAAE,IAAI,CAAC;MACpB,CAAC,CAAC,CAAC;MACH,SAASQ,IAAIA,CAAA,EAAG;QACd,OAAOT,KAAK,CAACzF,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;MACrC;MACA,OAAOmG,IAAI;IACb,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD5E,GAAG,EAAE,SAAS;IACdnD,KAAK,EAAE,YAAY;MACjB,IAAIgI,QAAQ,GAAG,CAAC,CAAC,EAAE1H,kBAAkB,CAACL,OAAO,GAAG,aAAaC,YAAY,CAACD,OAAO,CAAC2F,IAAI,CAAC,SAASqC,QAAQA,CAAA,EAAG;QACzG,IAAIC,KAAK;UACPT,IAAI;UACJU,KAAK;UACL1C,OAAO;UACP2C,MAAM,GAAGxG,SAAS;QACpB,OAAO1B,YAAY,CAACD,OAAO,CAAC6F,IAAI,CAAC,UAAUuC,SAAS,EAAE;UACpD,OAAO,CAAC,EAAE,QAAQA,SAAS,CAACrC,IAAI,GAAGqC,SAAS,CAACpC,IAAI;YAC/C,KAAK,CAAC;cACJ,KAAKiC,KAAK,GAAGE,MAAM,CAACtE,MAAM,EAAE2D,IAAI,GAAG,IAAII,KAAK,CAACK,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;gBACtFV,IAAI,CAACU,KAAK,CAAC,GAAGC,MAAM,CAACD,KAAK,CAAC;cAC7B;cACAE,SAAS,CAACpC,IAAI,GAAG,CAAC;cAClB,OAAO,CAAC,CAAC,EAAEvF,KAAK,CAACT,OAAO,EAAE,CAAC,CAAC,EAAEY,gBAAgB,CAACZ,OAAO,EAAE2C,SAAS,CAACV,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAACL,KAAK,CAAC,IAAI,EAAE4F,IAAI,CAAC;YAClH,KAAK,CAAC;cACJY,SAAS,CAACpC,IAAI,GAAG,CAAC;cAClB,OAAO,IAAI,CAACK,cAAc,CAAC,CAAC;YAC9B,KAAK,CAAC;cACJb,OAAO,GAAG4C,SAAS,CAAClC,IAAI;cACxB,IAAI,CAACV,OAAO,EAAE;gBACZ4C,SAAS,CAACpC,IAAI,GAAG,CAAC;gBAClB;cACF;cACA,OAAOoC,SAAS,CAACjC,MAAM,CAAC,QAAQ,EAAEtF,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC,CAAC6E,kBAAkB,CAAC,CAAC,CAAC;YAClG,KAAK,CAAC;cACJ,OAAOD,SAAS,CAACjC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;YACzC,KAAK,CAAC;YACN,KAAK,KAAK;cACR,OAAOiC,SAAS,CAAChC,IAAI,CAAC,CAAC;UAC3B;QACF,CAAC,EAAE4B,QAAQ,EAAE,IAAI,CAAC;MACpB,CAAC,CAAC,CAAC;MACH,SAASM,OAAOA,CAAA,EAAG;QACjB,OAAOP,QAAQ,CAACnG,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;MACxC;MACA,OAAO2G,OAAO;IAChB,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDpF,GAAG,EAAE,OAAO;IACZnD,KAAK,EAAE,YAAY;MACjB,IAAIwI,MAAM,GAAG,CAAC,CAAC,EAAElI,kBAAkB,CAACL,OAAO,GAAG,aAAaC,YAAY,CAACD,OAAO,CAAC2F,IAAI,CAAC,SAAS6C,QAAQA,CAAA,EAAG;QACvG,IAAIC,KAAK;UACPjB,IAAI;UACJkB,KAAK;UACLlD,OAAO;UACPmD,MAAM,GAAGhH,SAAS;QACpB,OAAO1B,YAAY,CAACD,OAAO,CAAC6F,IAAI,CAAC,UAAU+C,SAAS,EAAE;UACpD,OAAO,CAAC,EAAE,QAAQA,SAAS,CAAC7C,IAAI,GAAG6C,SAAS,CAAC5C,IAAI;YAC/C,KAAK,CAAC;cACJ,KAAKyC,KAAK,GAAGE,MAAM,CAAC9E,MAAM,EAAE2D,IAAI,GAAG,IAAII,KAAK,CAACa,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;gBACtFlB,IAAI,CAACkB,KAAK,CAAC,GAAGC,MAAM,CAACD,KAAK,CAAC;cAC7B;cACAE,SAAS,CAAC5C,IAAI,GAAG,CAAC;cAClB,OAAO,CAAC,CAAC,EAAEvF,KAAK,CAACT,OAAO,EAAE,CAAC,CAAC,EAAEY,gBAAgB,CAACZ,OAAO,EAAE2C,SAAS,CAACV,SAAS,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAACL,KAAK,CAAC,IAAI,EAAE4F,IAAI,CAAC;YAChH,KAAK,CAAC;cACJoB,SAAS,CAAC5C,IAAI,GAAG,CAAC;cAClB,OAAO,IAAI,CAACK,cAAc,CAAC,CAAC;YAC9B,KAAK,CAAC;cACJb,OAAO,GAAGoD,SAAS,CAAC1C,IAAI;cACxB,IAAI,CAACV,OAAO,EAAE;gBACZoD,SAAS,CAAC5C,IAAI,GAAG,CAAC;gBAClB;cACF;cACA,OAAO4C,SAAS,CAACzC,MAAM,CAAC,QAAQ,EAAEtF,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC,CAACqE,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACpG,KAAK,CAAC;cACJ,OAAOe,SAAS,CAACzC,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;YACzC,KAAK,CAAC;YACN,KAAK,KAAK;cACR,OAAOyC,SAAS,CAACxC,IAAI,CAAC,CAAC;UAC3B;QACF,CAAC,EAAEoC,QAAQ,EAAE,IAAI,CAAC;MACpB,CAAC,CAAC,CAAC;MACH,SAASK,KAAKA,CAAA,EAAG;QACf,OAAON,MAAM,CAAC3G,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;MACtC;MACA,OAAOkH,KAAK;IACd,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD3F,GAAG,EAAE,kBAAkB;IACvBnD,KAAK,EAAE,YAAY;MACjB,IAAI+I,iBAAiB,GAAG,CAAC,CAAC,EAAEzI,kBAAkB,CAACL,OAAO,GAAG,aAAaC,YAAY,CAACD,OAAO,CAAC2F,IAAI,CAAC,SAASoD,QAAQA,CAAA,EAAG;QAClH,IAAIC,KAAK;UACPxB,IAAI;UACJyB,KAAK;UACLzD,OAAO;UACP0D,MAAM,GAAGvH,SAAS;QACpB,OAAO1B,YAAY,CAACD,OAAO,CAAC6F,IAAI,CAAC,UAAUsD,SAAS,EAAE;UACpD,OAAO,CAAC,EAAE,QAAQA,SAAS,CAACpD,IAAI,GAAGoD,SAAS,CAACnD,IAAI;YAC/C,KAAK,CAAC;cACJ,KAAKgD,KAAK,GAAGE,MAAM,CAACrF,MAAM,EAAE2D,IAAI,GAAG,IAAII,KAAK,CAACoB,KAAK,CAAC,EAAEC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGD,KAAK,EAAEC,KAAK,EAAE,EAAE;gBACtFzB,IAAI,CAACyB,KAAK,CAAC,GAAGC,MAAM,CAACD,KAAK,CAAC;cAC7B;cACAE,SAAS,CAACnD,IAAI,GAAG,CAAC;cAClB,OAAO,CAAC,CAAC,EAAEvF,KAAK,CAACT,OAAO,EAAE,CAAC,CAAC,EAAEY,gBAAgB,CAACZ,OAAO,EAAE2C,SAAS,CAACV,SAAS,CAAC,EAAE,kBAAkB,EAAE,IAAI,CAAC,CAACL,KAAK,CAAC,IAAI,EAAE4F,IAAI,CAAC;YAC3H,KAAK,CAAC;cACJ2B,SAAS,CAACnD,IAAI,GAAG,CAAC;cAClB,OAAO,IAAI,CAACK,cAAc,CAAC,CAAC;YAC9B,KAAK,CAAC;cACJb,OAAO,GAAG2D,SAAS,CAACjD,IAAI;cACxB,IAAI,CAACV,OAAO,EAAE;gBACZ2D,SAAS,CAACnD,IAAI,GAAG,CAAC;gBAClB;cACF;cACA,OAAOmD,SAAS,CAAChD,MAAM,CAAC,QAAQ,EAAEtF,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC,CAACqE,gBAAgB,CAAC,IAAI,CAAC,CAAC;YACpG,KAAK,CAAC;cACJ,OAAOsB,SAAS,CAAChD,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC;YACzC,KAAK,CAAC;YACN,KAAK,KAAK;cACR,OAAOgD,SAAS,CAAC/C,IAAI,CAAC,CAAC;UAC3B;QACF,CAAC,EAAE2C,QAAQ,EAAE,IAAI,CAAC;MACpB,CAAC,CAAC,CAAC;MACH,SAASK,gBAAgBA,CAAA,EAAG;QAC1B,OAAON,iBAAiB,CAAClH,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;MACjD;MACA,OAAOyH,gBAAgB;IACzB,CAAC,CAAC;IACF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDlG,GAAG,EAAE,gBAAgB;IACrBnD,KAAK,EAAE,SAAAA,CAAUyG,QAAQ,CAAC,cAAcrD,OAAO,CAAC,0BAA0B,wBAAwB;MAChG,IAAImD,QAAQ,GAAG,IAAI,CAAC+C,WAAW,CAAC,CAAC,IAAI,EAAE;MACvC,OAAO1G,SAAS,CAAC2G,cAAc,CAAChD,QAAQ,EAAEE,QAAQ,EAAErD,OAAO,CAAC;IAC9D;EACF,CAAC,CAAC,EAAE,CAAC;IACHD,GAAG,EAAE,oBAAoB;IACzBnD,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,OAAO,CAAC,cAAc,CAAC;IACzB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDmD,GAAG,EAAE,QAAQ;IACbnD,KAAK,EAAE,SAAAA,CAAUwJ,UAAU,CAAC,+BAA+BC,UAAU,CAAC,+BAA+B;MACnG,IAAID,UAAU,EAAE;QACd,KAAK,IAAIE,KAAK,IAAIF,UAAU,EAAE;UAC5B,IAAIE,KAAK,KAAK,WAAW,EAAE;YACzB,CAAC,CAAC,EAAEtJ,eAAe,CAACH,OAAO,EAAE2C,SAAS,CAACV,SAAS,EAAEwH,KAAK,EAAE;cACvD1J,KAAK,EAAEwJ,UAAU,CAACE,KAAK,CAAC;cACxBC,UAAU,EAAE,KAAK;cACjBC,QAAQ,EAAE,IAAI;cACdC,YAAY,EAAE;YAChB,CAAC,CAAC;UACJ;QACF;MACF;MACA,IAAIJ,UAAU,EAAE;QACd,KAAK,IAAIK,MAAM,IAAIL,UAAU,EAAE;UAC7B,IAAIK,MAAM,KAAK,WAAW,EAAE;YAC1B,CAAC,CAAC,EAAE1J,eAAe,CAACH,OAAO,EAAE2C,SAAS,EAAEkH,MAAM,EAAE;cAC9C9J,KAAK,EAAEyJ,UAAU,CAACK,MAAM,CAAC;cACzBH,UAAU,EAAE,KAAK;cACjBC,QAAQ,EAAE,IAAI;cACdC,YAAY,EAAE;YAChB,CAAC,CAAC;UACJ;QACF;MACF;MACA,OAAOjH,SAAS;IAClB;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDO,GAAG,EAAE,SAAS;IACdnD,KAAK,EAAE,SAAAA,CAAA,EAAY,gBAAgB;MACjC,IAAI,CAACuC,iBAAiB,EAAE;QACtB,OAAO,IAAI;MACb;MACA,IAAIiB,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAACuG,WAAW,CAAC,CAAC;IACjC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD5G,GAAG,EAAE,cAAc;IACnBnD,KAAK,EAAE,SAAAA,CAAA,EAAY,yBAAyB;MAC1C,IAAI,CAACuC,iBAAiB,EAAE;QACtB,OAAOpC,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAAC,IAAI,CAAC;MACvC;MACA,IAAIhB,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAACwG,gBAAgB,CAAC,CAAC;IACtC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD7G,GAAG,EAAE,QAAQ;IACbnD,KAAK,EAAE,SAAAA,CAAUuG,QAAQ,CAAC,cAAcE,QAAQ,CAAC,cAAcG,KAAK,CAAC,oBAAoBxD,OAAO,CAAC,uBAAuB;MACtHwD,KAAK,GAAGA,KAAK,IAAI,CAAC,CAAC;MACnBA,KAAK,CAACL,QAAQ,GAAGA,QAAQ;MACzBK,KAAK,CAACH,QAAQ,GAAGA,QAAQ;MACzB,IAAIwD,IAAI,GAAG,IAAI,IAAI,CAACrD,KAAK,CAAC;MAC1B,OAAOqD,IAAI,CAAC/C,MAAM,CAAC,CAAC,CAAC,EAAE9D,OAAO,CAAC;IACjC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDD,GAAG,EAAE,OAAO;IACZnD,KAAK,EAAE,SAAAA,CAAUuG,QAAQ,CAAC,cAAcE,QAAQ,CAAC,cAAcrD,OAAO,CAAC,uBAAuB;MAC5F,IAAI,OAAOmD,QAAQ,KAAK,QAAQ,EAAE;QAChC,OAAOpG,QAAQ,CAACF,OAAO,CAACwE,MAAM,CAAC,IAAIzD,WAAW,CAACf,OAAO,CAACe,WAAW,CAACf,OAAO,CAACiK,WAAW,EAAE,4BAA4B,CAAC,CAAC;MACxH,CAAC,MAAM,IAAI,OAAOzD,QAAQ,KAAK,QAAQ,EAAE;QACvC,OAAOtG,QAAQ,CAACF,OAAO,CAACwE,MAAM,CAAC,IAAIzD,WAAW,CAACf,OAAO,CAACe,WAAW,CAACf,OAAO,CAACiK,WAAW,EAAE,4BAA4B,CAAC,CAAC;MACxH;MACA,IAAID,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;MACrBA,IAAI,CAACE,YAAY,CAAC;QAChB5D,QAAQ,EAAEA,QAAQ;QAClBE,QAAQ,EAAEA;MACZ,CAAC,CAAC;MACF,OAAOwD,IAAI,CAAC5C,KAAK,CAACjE,OAAO,CAAC;IAC5B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDD,GAAG,EAAE,SAAS;IACdnD,KAAK,EAAE,SAAAA,CAAUoK,MAAM,CAAC,cAAc;MACpC,IAAI,CAACA,MAAM,EAAE;QACX,MAAM,IAAIpJ,WAAW,CAACf,OAAO,CAACe,WAAW,CAACf,OAAO,CAACoK,gBAAgB,EAAE,6CAA6C,CAAC;MACpH;MACA,IAAI7G,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,IAAIwG,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;MACrB,OAAOzG,UAAU,CAAC8G,OAAO,CAACL,IAAI,EAAEG,MAAM,CAAC;IACzC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDjH,GAAG,EAAE,QAAQ;IACbnD,KAAK,EAAE,SAAAA,CAAUgE,YAAY,CAAC,cAAcZ,OAAO,CAAC,0BAA0B;MAC5E,IAAI,CAACb,iBAAiB,EAAE;QACtB,MAAM,IAAIW,KAAK,CAAC,gEAAgE,CAAC;MACnF;MACAE,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAImH,aAAa,CAAC,uBAAuB;QACvCvG,YAAY,EAAEA;MAChB,CAAC;MACD,IAAIZ,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1CiH,aAAa,CAAChH,YAAY,GAAGH,OAAO,CAACG,YAAY;MACnD;MACA,IAAIC,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,IAAIwG,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;MACrB,OAAOzG,UAAU,CAACgH,MAAM,CAACP,IAAI,EAAEM,aAAa,CAAC;IAC/C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDpH,GAAG,EAAE,IAAI;IACTnD,KAAK,EAAE,SAAAA,CAAUgE,YAAY,CAAC,cAAc;MAC1C,IAAIZ,OAAO,CAAC,2BAA2BxB,SAAS,CAACkC,MAAM,GAAG,CAAC,IAAIlC,SAAS,CAAC,CAAC,CAAC,KAAKmC,SAAS,GAAGnC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MAC7G,IAAI4B,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,IAAIgH,SAAS,CAAC,uBAAuB;QACnCzG,YAAY,EAAEA;MAChB,CAAC;MACD,IAAIZ,OAAO,CAACG,YAAY,EAAE;QACxBkH,SAAS,CAAClH,YAAY,GAAGH,OAAO,CAACG,YAAY;MAC/C;MACA,IAAI0G,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;MACrB,OAAOzG,UAAU,CAACkH,EAAE,CAACT,IAAI,EAAEQ,SAAS,CAAC;IACvC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDtH,GAAG,EAAE,SAAS;IACdnD,KAAK,EAAE,SAAAA,CAAU2K,QAAQ,CAAC,oBAAoB;MAC5C,IAAInH,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,IAAIwG,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;MACrB,OAAOzG,UAAU,CAACoH,OAAO,CAACX,IAAI,EAAEU,QAAQ,CAAC;IAC3C;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDxH,GAAG,EAAE,WAAW;IAChBnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,WAAWP,OAAO,CAAC,+BAA+BS,QAAQ,CAAC,uBAAuB,wBAAwB;MAClI,IAAIoG,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;MACrB,OAAOA,IAAI,CAAC1F,QAAQ,CAACZ,QAAQ,EAAEP,OAAO,EAAES,QAAQ,CAAC;IACnD;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDV,GAAG,EAAE,QAAQ;IACbnD,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB,IAAIoD,OAAO,CAAC,uBAAuBxB,SAAS,CAACkC,MAAM,GAAG,CAAC,IAAIlC,SAAS,CAAC,CAAC,CAAC,KAAKmC,SAAS,GAAGnC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;MACzG,IAAI4B,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAACqH,MAAM,CAACzH,OAAO,CAAC;IACnC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDD,GAAG,EAAE,sBAAsB;IAC3BnD,KAAK,EAAE,SAAAA,CAAU0G,KAAK,CAAC,cAActD,OAAO,CAAC,0BAA0B;MACrEA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAI0H,cAAc,GAAG,CAAC,CAAC;MACvB,IAAI1H,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1CwH,cAAc,CAACvH,YAAY,GAAGH,OAAO,CAACG,YAAY;MACpD;MACA,IAAIC,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAACuH,oBAAoB,CAACrE,KAAK,EAAEoE,cAAc,CAAC;IAC/D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD3H,GAAG,EAAE,0BAA0B;IAC/BnD,KAAK,EAAE,SAAAA,CAAU0G,KAAK,CAAC,cAActD,OAAO,CAAC,0BAA0B;MACrEA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAI0H,cAAc,GAAG,CAAC,CAAC;MACvB,IAAI1H,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1CwH,cAAc,CAACvH,YAAY,GAAGH,OAAO,CAACG,YAAY;MACpD;MACA,IAAIC,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAACwH,wBAAwB,CAACtE,KAAK,EAAEoE,cAAc,CAAC;IACnE;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD3H,GAAG,EAAE,gBAAgB;IACrBnD,KAAK,EAAE,SAAAA,CAAUuG,QAAQ,CAAC,cAAcE,QAAQ,CAAC,cAAcrD,OAAO,CAAC,0BAA0B;MAC/F,IAAI,OAAOmD,QAAQ,KAAK,QAAQ,EAAE;QAChC,OAAOpG,QAAQ,CAACF,OAAO,CAACwE,MAAM,CAAC,IAAIzD,WAAW,CAACf,OAAO,CAACe,WAAW,CAACf,OAAO,CAACiK,WAAW,EAAE,4BAA4B,CAAC,CAAC;MACxH;MACA,IAAI,OAAOzD,QAAQ,KAAK,QAAQ,EAAE;QAChC,OAAOtG,QAAQ,CAACF,OAAO,CAACwE,MAAM,CAAC,IAAIzD,WAAW,CAACf,OAAO,CAACe,WAAW,CAACf,OAAO,CAACiK,WAAW,EAAE,4BAA4B,CAAC,CAAC;MACxH;MACA9G,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvB,IAAI6H,kBAAkB,GAAG,CAAC,CAAC;MAC3B,IAAI7H,OAAO,CAACE,cAAc,CAAC,cAAc,CAAC,EAAE;QAC1C2H,kBAAkB,CAAC1H,YAAY,GAAGH,OAAO,CAACG,YAAY;MACxD;MACA,IAAIC,UAAU,GAAG1C,YAAY,CAACb,OAAO,CAACwD,iBAAiB,CAAC,CAAC;MACzD,OAAOD,UAAU,CAAC+F,cAAc,CAAChD,QAAQ,EAAEE,QAAQ,EAAEwE,kBAAkB,CAAC;IAC1E;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD9H,GAAG,EAAE,sBAAsB;IAC3BnD,KAAK,EAAE,SAAAA,CAAUkL,SAAS,CAAC,eAAe;MACxCpK,YAAY,CAACb,OAAO,CAACgD,GAAG,CAAC,sBAAsB,EAAE,CAACiI,SAAS,CAAC;IAC9D;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACD/H,GAAG,EAAE,wBAAwB;IAC7BnD,KAAK,EAAE,SAAAA,CAAUoD,OAAO,CAAC,0BAA0B;MACjDA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;MACvBtC,YAAY,CAACb,OAAO,CAACgD,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAAC;MACzD,IAAIV,iBAAiB,EAAE;QACrB,IAAIkD,OAAO,GAAG7C,SAAS,CAAC6C,OAAO,CAAC,CAAC;QACjC,IAAIA,OAAO,EAAE;UACX,OAAOA,OAAO,CAAC0F,0BAA0B,CAAC/H,OAAO,CAAC;QACpD;MACF;MACA,OAAOjD,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAAC,CAAC;IACnC;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDrB,GAAG,EAAE,yBAAyB;IAC9BnD,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjBuC,iBAAiB,GAAG,IAAI;IAC1B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDY,GAAG,EAAE,0BAA0B;IAC/BnD,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjBuC,iBAAiB,GAAG,KAAK;IAC3B;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDY,GAAG,EAAE,iCAAiC;IACtCnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,WAAW;MACnChB,aAAa,CAACgB,QAAQ,CAACU,WAAW,CAAC,CAAC,CAAC,GAAGV,QAAQ;MAChD;MACAf,SAAS,CAACsD,YAAY,CAAC,CAAC,CAACrB,IAAI,CAAC,UAAUY,OAAO,EAAE;QAC/C,IAAIA,OAAO,EAAE;UACXA,OAAO,CAACN,oBAAoB,CAACxB,QAAQ,CAACU,WAAW,CAAC,CAAC,CAAC;QACtD;MACF,CAAC,CAAC;IACJ;;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACE,CAAC,EAAE;IACDlB,GAAG,EAAE,YAAY;IACjBnD,KAAK,EAAE,SAAAA,CAAU2D,QAAQ,CAAC,WAAWP,OAAO,CAAC,+BAA+BS,QAAQ,CAAC,uBAAuB;MAC1G,IAAIoG,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC;MACrB,OAAOA,IAAI,CAAC1F,QAAQ,CAACZ,QAAQ,EAAEP,OAAO,EAAES,QAAQ,CAAC;IACnD;EACF,CAAC,EAAE;IACDV,GAAG,EAAE,aAAa;IAClBnD,KAAK,EAAE,SAAAA,CAAA,EAAY;MACjB0C,gBAAgB,GAAG,IAAI;MACvBD,2BAA2B,GAAG,KAAK;IACrC;EACF,CAAC,EAAE;IACDU,GAAG,EAAE,sBAAsB;IAC3BnD,KAAK,EAAE,SAAAA,CAAUiK,IAAI,CAAC,iBAAiB;MACrCvH,gBAAgB,GAAGuH,IAAI;IACzB;EACF,CAAC,CAAC,CAAC;EACH,OAAOrH,SAAS;AAClB,CAAC,CAAC3B,aAAa,CAAChB,OAAO,CAAC;AACxBgB,aAAa,CAAChB,OAAO,CAACmL,gBAAgB,CAAC,OAAO,EAAExI,SAAS,CAAC;AAC1D,IAAIyI,iBAAiB,GAAG;EACtBvD,gBAAgB,EAAE,SAAAA,CAAUmC,IAAI,EAAE;IAChC,IAAIqB,IAAI,GAAGnK,QAAQ,CAAClB,OAAO,CAACsL,YAAY,CAACjJ,gBAAgB,CAAC;IAC1D,IAAIkJ,IAAI,GAAGvB,IAAI,CAACwB,MAAM,CAAC,CAAC;IACxB,OAAOD,IAAI,CAAC/E,QAAQ;IACpB+E,IAAI,CAACE,SAAS,GAAG,OAAO;IACxB,IAAIC,QAAQ,GAAG,CAAC,CAAC,EAAEtL,UAAU,CAACJ,OAAO,EAAEuL,IAAI,CAAC;IAC5C,IAAI1K,YAAY,CAACb,OAAO,CAACuC,GAAG,CAAC,gBAAgB,CAAC,EAAE;MAC9C,IAAIoJ,MAAM,GAAG9K,YAAY,CAACb,OAAO,CAAC4L,mBAAmB,CAAC,CAAC;MACvDF,QAAQ,GAAGC,MAAM,CAACE,OAAO,CAACN,IAAI,EAAE1K,YAAY,CAACb,OAAO,CAACuC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC5E;IACA,OAAOrB,QAAQ,CAAClB,OAAO,CAAC8L,YAAY,CAACT,IAAI,EAAEK,QAAQ,CAAC,CAAC9G,IAAI,CAAC,YAAY;MACpE,OAAOoF,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;EACD3B,kBAAkB,EAAE,SAAAA,CAAA,EAAY;IAC9B,IAAIgD,IAAI,GAAGnK,QAAQ,CAAClB,OAAO,CAACsL,YAAY,CAACjJ,gBAAgB,CAAC;IAC1DG,2BAA2B,GAAG,IAAI;IAClCC,gBAAgB,GAAG,IAAI;IACvB,OAAOvB,QAAQ,CAAClB,OAAO,CAAC+L,eAAe,CAACV,IAAI,CAAC;EAC/C,CAAC;EACDW,cAAc,EAAE,SAAAA,CAAUhC,IAAI,EAAE;IAC9BvH,gBAAgB,GAAGuH,IAAI;IACvBA,IAAI,CAACiC,gBAAgB,CAAC,CAAC;IACvBjC,IAAI,CAACkC,uBAAuB,CAAC,CAAC;IAC9B,OAAOd,iBAAiB,CAACvD,gBAAgB,CAACmC,IAAI,CAAC;EACjD,CAAC;EACDF,WAAW,EAAE,SAAAA,CAAA,EAAY,gBAAgB;IACvC,IAAIrH,gBAAgB,EAAE;MACpB,OAAOA,gBAAgB;IACzB;IACA,IAAID,2BAA2B,EAAE;MAC/B,OAAO,IAAI;IACb;IACA,IAAItB,QAAQ,CAAClB,OAAO,CAACmM,KAAK,CAAC,CAAC,EAAE;MAC5B,MAAM,IAAIlJ,KAAK,CAAC,gEAAgE,GAAG,kDAAkD,CAAC;IACxI;IACA,IAAIoI,IAAI,GAAGnK,QAAQ,CAAClB,OAAO,CAACsL,YAAY,CAACjJ,gBAAgB,CAAC;IAC1D,IAAIqJ,QAAQ,GAAGxK,QAAQ,CAAClB,OAAO,CAACoM,OAAO,CAACf,IAAI,CAAC;IAC7C7I,2BAA2B,GAAG,IAAI;IAClC,IAAI,CAACkJ,QAAQ,EAAE;MACbjJ,gBAAgB,GAAG,IAAI;MACvB,OAAO,IAAI;IACb;IACA,IAAI5B,YAAY,CAACb,OAAO,CAACuC,GAAG,CAAC,gBAAgB,CAAC,EAAE;MAC9C,IAAIoJ,MAAM,GAAG9K,YAAY,CAACb,OAAO,CAAC4L,mBAAmB,CAAC,CAAC;MACvDF,QAAQ,GAAGC,MAAM,CAACU,OAAO,CAACX,QAAQ,EAAE7K,YAAY,CAACb,OAAO,CAACuC,GAAG,CAAC,eAAe,CAAC,CAAC;IAChF;IACAmJ,QAAQ,GAAGY,IAAI,CAACC,KAAK,CAACb,QAAQ,CAAC;IAC/B,IAAI,CAACA,QAAQ,CAACD,SAAS,EAAE;MACvBC,QAAQ,CAACD,SAAS,GAAG,OAAO;IAC9B;IACA,IAAIC,QAAQ,CAACc,GAAG,EAAE;MAChB,IAAId,QAAQ,CAACe,QAAQ,KAAKf,QAAQ,CAACc,GAAG,EAAE;QACtCd,QAAQ,CAACe,QAAQ,GAAGf,QAAQ,CAACc,GAAG;MAClC;MACA,OAAOd,QAAQ,CAACc,GAAG;IACrB;IACA,IAAId,QAAQ,CAACgB,aAAa,EAAE;MAC1BhB,QAAQ,CAAC3H,YAAY,GAAG2H,QAAQ,CAACgB,aAAa;MAC9C,OAAOhB,QAAQ,CAACgB,aAAa;IAC/B;IACA,IAAIlH,OAAO,GAAGxE,aAAa,CAAChB,OAAO,CAAC2M,QAAQ,CAACjB,QAAQ,CAAC;IACtDjJ,gBAAgB,GAAG+C,OAAO;IAC1BA,OAAO,CAAC0G,uBAAuB,CAAC,CAAC;IACjC,OAAO1G,OAAO;EAChB,CAAC;EACDuE,gBAAgB,EAAE,SAAAA,CAAA,EAAY,yBAAyB;IACrD,IAAItH,gBAAgB,EAAE;MACpB,OAAOvC,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAAC9B,gBAAgB,CAAC;IACnD;IACA,IAAID,2BAA2B,EAAE;MAC/B,OAAOtC,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAAC,IAAI,CAAC;IACvC;IACA,IAAI8G,IAAI,GAAGnK,QAAQ,CAAClB,OAAO,CAACsL,YAAY,CAACjJ,gBAAgB,CAAC;IAC1D,OAAOnB,QAAQ,CAAClB,OAAO,CAAC4M,YAAY,CAACvB,IAAI,CAAC,CAACzG,IAAI,CAAC,UAAU8G,QAAQ,EAAE;MAClElJ,2BAA2B,GAAG,IAAI;MAClC,IAAI,CAACkJ,QAAQ,EAAE;QACbjJ,gBAAgB,GAAG,IAAI;QACvB,OAAOvC,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAAC,IAAI,CAAC;MACvC;MACA,IAAI1D,YAAY,CAACb,OAAO,CAACuC,GAAG,CAAC,gBAAgB,CAAC,EAAE;QAC9C,IAAIoJ,MAAM,GAAG9K,YAAY,CAACb,OAAO,CAAC4L,mBAAmB,CAAC,CAAC;QACvDF,QAAQ,GAAGC,MAAM,CAACU,OAAO,CAACX,QAAQ,CAAC3E,QAAQ,CAAC,CAAC,EAAElG,YAAY,CAACb,OAAO,CAACuC,GAAG,CAAC,eAAe,CAAC,CAAC;MAC3F;MACAmJ,QAAQ,GAAGY,IAAI,CAACC,KAAK,CAACb,QAAQ,CAAC;MAC/B,IAAI,CAACA,QAAQ,CAACD,SAAS,EAAE;QACvBC,QAAQ,CAACD,SAAS,GAAG,OAAO;MAC9B;MACA,IAAIC,QAAQ,CAACc,GAAG,EAAE;QAChB,IAAId,QAAQ,CAACe,QAAQ,KAAKf,QAAQ,CAACc,GAAG,EAAE;UACtCd,QAAQ,CAACe,QAAQ,GAAGf,QAAQ,CAACc,GAAG;QAClC;QACA,OAAOd,QAAQ,CAACc,GAAG;MACrB;MACA,IAAId,QAAQ,CAACgB,aAAa,EAAE;QAC1BhB,QAAQ,CAAC3H,YAAY,GAAG2H,QAAQ,CAACgB,aAAa;QAC9C,OAAOhB,QAAQ,CAACgB,aAAa;MAC/B;MACA,IAAIlH,OAAO,GAAGxE,aAAa,CAAChB,OAAO,CAAC2M,QAAQ,CAACjB,QAAQ,CAAC;MACtDjJ,gBAAgB,GAAG+C,OAAO;MAC1BA,OAAO,CAAC0G,uBAAuB,CAAC,CAAC;MACjC,OAAOhM,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAACiB,OAAO,CAAC;IAC1C,CAAC,CAAC;EACJ,CAAC;EACDyB,MAAM,EAAE,SAAAA,CAAU+C,IAAI,CAAC,iBAAiBrD,KAAK,CAAC,oBAAoBxD,OAAO,CAAC,sBAAsB,wBAAwB;IACtH,IAAImD,QAAQ,GAAGK,KAAK,IAAIA,KAAK,CAACL,QAAQ,IAAI0D,IAAI,CAACzH,GAAG,CAAC,UAAU,CAAC;IAC9D,IAAIiE,QAAQ,GAAGG,KAAK,IAAIA,KAAK,CAACH,QAAQ,IAAIwD,IAAI,CAACzH,GAAG,CAAC,UAAU,CAAC;IAC9D,IAAI,CAAC+D,QAAQ,IAAI,CAACA,QAAQ,CAACzC,MAAM,EAAE;MACjC,OAAO3D,QAAQ,CAACF,OAAO,CAACwE,MAAM,CAAC,IAAIzD,WAAW,CAACf,OAAO,CAACe,WAAW,CAACf,OAAO,CAACiK,WAAW,EAAE,6CAA6C,CAAC,CAAC;IACzI;IACA,IAAI,CAACzD,QAAQ,IAAI,CAACA,QAAQ,CAAC3C,MAAM,EAAE;MACjC,OAAO3D,QAAQ,CAACF,OAAO,CAACwE,MAAM,CAAC,IAAIzD,WAAW,CAACf,OAAO,CAACe,WAAW,CAACf,OAAO,CAACiK,WAAW,EAAE,6CAA6C,CAAC,CAAC;IACzI;IACA,OAAOD,IAAI,CAAClC,IAAI,CAACnB,KAAK,EAAExD,OAAO,CAAC,CAACyB,IAAI,CAAC,YAAY;MAChD;MACAoF,IAAI,CAACE,YAAY,CAAC;QAChB1D,QAAQ,EAAE1C;MACZ,CAAC,CAAC;MACF,IAAIxB,iBAAiB,EAAE;QACrB,OAAO8I,iBAAiB,CAACY,cAAc,CAAChC,IAAI,CAAC;MAC/C;MACA,OAAOA,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;EACD5C,KAAK,EAAE,SAAAA,CAAU4C,IAAI,CAAC,iBAAiB7G,OAAO,CAAC,sBAAsB,wBAAwB;IAC3F,IAAI0J,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;IAC7D,IAAIC,eAAe,GAAGlM,YAAY,CAACb,OAAO,CAACgN,wBAAwB,CAAC,CAAC;IACrE,IAAIC,IAAI,GAAG;MACT3G,QAAQ,EAAE0D,IAAI,CAACzH,GAAG,CAAC,UAAU,CAAC;MAC9BiE,QAAQ,EAAEwD,IAAI,CAACzH,GAAG,CAAC,UAAU;IAC/B,CAAC;IACD,OAAOsK,cAAc,CAACK,OAAO,CAAC/J,OAAO,CAACgE,OAAO,GAAG,MAAM,GAAG,KAAK,EAAE,OAAO,EAAE8F,IAAI,EAAE9J,OAAO,CAAC,CAACyB,IAAI,CAAC,UAAUuI,QAAQ,EAAE;MAC/GnD,IAAI,CAACoD,UAAU,CAACD,QAAQ,CAACV,QAAQ,CAAC;MAClCzC,IAAI,CAACqD,WAAW,CAAC,IAAI,CAAC;MACtBN,eAAe,CAACO,YAAY,CAACtD,IAAI,CAACuD,mBAAmB,CAAC,CAAC,EAAE,UAAU,EAAEzJ,SAAS,CAAC;MAC/EiJ,eAAe,CAACO,YAAY,CAACtD,IAAI,CAACuD,mBAAmB,CAAC,CAAC,EAAE,UAAU,EAAEzJ,SAAS,CAAC;MAC/EqJ,QAAQ,CAAC3G,QAAQ,GAAG1C,SAAS;MAC7BkG,IAAI,CAACE,YAAY,CAACiD,QAAQ,CAAC;MAC3B,IAAI,CAAC7K,iBAAiB,EAAE;QACtB;QACA,OAAOpC,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAACyF,IAAI,CAAC;MACvC;MACA,OAAOoB,iBAAiB,CAACY,cAAc,CAAChC,IAAI,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EACDK,OAAO,EAAE,SAAAA,CAAUL,IAAI,CAAC,iBAAiBG,MAAM,CAAC,cAAc,wBAAwB;IACpF,IAAI0C,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;IAC7D,OAAOD,cAAc,CAACK,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE;MAC/C/C,MAAM,EAAEA;IACV,CAAC,EAAE;MACD7G,YAAY,EAAE;IAChB,CAAC,CAAC,CAACsB,IAAI,CAAC,UAAUuI,QAAQ,EAAE;MAC1BnD,IAAI,CAACE,YAAY,CAACiD,QAAQ,CAAC;MAC3BnD,IAAI,CAACqD,WAAW,CAAC,IAAI,CAAC;MACtB,IAAI,CAAC/K,iBAAiB,EAAE;QACtB,OAAOpC,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAACyF,IAAI,CAAC;MACvC;MACA,OAAOoB,iBAAiB,CAACY,cAAc,CAAChC,IAAI,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EACDO,MAAM,EAAE,SAAAA,CAAUP,IAAI,CAAC,iBAAiB7G,OAAO,CAAC,sBAAsB,wBAAwB;IAC5F,IAAI0J,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;IAC7D,OAAOD,cAAc,CAACK,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE/J,OAAO,CAAC,CAACyB,IAAI,CAAC,UAAUuI,QAAQ,EAAE;MACrFnD,IAAI,CAACE,YAAY,CAACiD,QAAQ,CAAC;MAC3BnD,IAAI,CAACqD,WAAW,CAAC,IAAI,CAAC;MACtB,OAAOjC,iBAAiB,CAACY,cAAc,CAAChC,IAAI,CAAC;IAC/C,CAAC,CAAC;EACJ,CAAC;EACDW,OAAO,EAAE,SAAAA,CAAUX,IAAI,CAAC,iBAAiBU,QAAQ,CAAC,oBAAoB,wBAAwB;IAC5FV,IAAI,CAACE,YAAY,CAACQ,QAAQ,CAAC;IAC3BV,IAAI,CAACqD,WAAW,CAAC,IAAI,CAAC;IACtB,IAAI3C,QAAQ,CAAC3G,YAAY,IAAIzB,iBAAiB,EAAE;MAC9C,OAAO8I,iBAAiB,CAACY,cAAc,CAAChC,IAAI,CAAC;IAC/C,CAAC,MAAM;MACL,OAAO9J,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAACyF,IAAI,CAAC;IACvC;EACF,CAAC;EACDS,EAAE,EAAE,SAAAA,CAAUT,IAAI,CAAC,iBAAiB7G,OAAO,CAAC,sBAAsB,wBAAwB;IACxF,IAAI0J,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;IAC7D,OAAOD,cAAc,CAACK,OAAO,CAAC,KAAK,EAAE,UAAU,EAAE,CAAC,CAAC,EAAE/J,OAAO,CAAC,CAACyB,IAAI,CAAC,UAAUuI,QAAQ,EAAE;MACrFnD,IAAI,CAACE,YAAY,CAACiD,QAAQ,CAAC;MAC3BnD,IAAI,CAACqD,WAAW,CAAC,IAAI,CAAC;MACtB,OAAOrD,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;EACDY,MAAM,EAAE,SAAAA,CAAUzH,OAAO,CAAC,sBAAsB,wBAAwB;IACtE,IAAI0J,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;IAC7D,IAAI3J,OAAO,CAACY,YAAY,EAAE;MACxB,OAAO8I,cAAc,CAACK,OAAO,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE/J,OAAO,CAAC;IAC9D;IACA,OAAOiI,iBAAiB,CAACrB,gBAAgB,CAAC,CAAC,CAACnF,IAAI,CAAC,UAAUkF,WAAW,EAAE;MACtE,IAAIuB,IAAI,GAAGnK,QAAQ,CAAClB,OAAO,CAACsL,YAAY,CAACjJ,gBAAgB,CAAC;MAC1D,IAAImL,OAAO,GAAGtM,QAAQ,CAAClB,OAAO,CAAC+L,eAAe,CAACV,IAAI,CAAC;MACpD,IAAIvB,WAAW,KAAK,IAAI,EAAE;QACxB,IAAI2D,cAAc,GAAG3D,WAAW,CAAC9F,eAAe,CAAC,CAAC;QAClD,IAAIyJ,cAAc,IAAI,CAAC,CAAC,EAAE3M,mBAAmB,CAACd,OAAO,EAAEyN,cAAc,CAAC,EAAE;UACtED,OAAO,GAAGA,OAAO,CAAC5I,IAAI,CAAC,YAAY;YACjC,OAAOiI,cAAc,CAACK,OAAO,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE;cAClDnJ,YAAY,EAAE0J;YAChB,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;QACA3D,WAAW,CAAC4D,cAAc,CAAC,CAAC;QAC5B5D,WAAW,CAACI,YAAY,CAAC;UACvBnG,YAAY,EAAED;QAChB,CAAC,CAAC;MACJ;MACAtB,2BAA2B,GAAG,IAAI;MAClCC,gBAAgB,GAAG,IAAI;MACvB,OAAO+K,OAAO;IAChB,CAAC,CAAC;EACJ,CAAC;EACD1C,oBAAoB,EAAE,SAAAA,CAAUrE,KAAK,CAAC,cAActD,OAAO,CAAC,sBAAsB;IAChF,IAAI0J,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;IAC7D,OAAOD,cAAc,CAACK,OAAO,CAAC,MAAM,EAAE,sBAAsB,EAAE;MAC5DzG,KAAK,EAAEA;IACT,CAAC,EAAEtD,OAAO,CAAC;EACb,CAAC;EACDM,yBAAyB,EAAE,SAAAA,CAAUuG,IAAI,CAAC,iBAAiB7G,OAAO,CAAC,sBAAsB;IACvF,OAAO,CAAC,CAAC,EAAE9C,kBAAkB,CAACL,OAAO,GAAG,aAAaC,YAAY,CAACD,OAAO,CAAC2F,IAAI,CAAC,SAASgI,QAAQA,CAAA,EAAG;MACjG,IAAIjH,KAAK,EAAEmG,cAAc,EAAErL,MAAM,EAAEoM,OAAO,EAAEpI,OAAO;MACnD,OAAOvF,YAAY,CAACD,OAAO,CAAC6F,IAAI,CAAC,UAAUgI,SAAS,EAAE;QACpD,OAAO,CAAC,EAAE,QAAQA,SAAS,CAAC9H,IAAI,GAAG8H,SAAS,CAAC7H,IAAI;UAC/C,KAAK,CAAC;YACJU,KAAK,GAAGsD,IAAI,CAAChG,eAAe,CAAC,CAAC;YAC9B,IAAI0C,KAAK,EAAE;cACTmH,SAAS,CAAC7H,IAAI,GAAG,CAAC;cAClB;YACF;YACA,OAAO6H,SAAS,CAAC1H,MAAM,CAAC,QAAQ,EAAEjG,QAAQ,CAACF,OAAO,CAACwE,MAAM,CAAC,IAAIzD,WAAW,CAACf,OAAO,CAACe,WAAW,CAACf,OAAO,CAAC8N,eAAe,EAAE,6CAA6C,CAAC,CAAC,CAAC;UACzK,KAAK,CAAC;YACJ3K,OAAO,CAACY,YAAY,GAAG2C,KAAK;YAC5BmG,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;YACzDe,SAAS,CAAC7H,IAAI,GAAG,CAAC;YAClB,OAAO6G,cAAc,CAACK,OAAO,CAAC,MAAM,EAAE,2BAA2B,EAAE,CAAC,CAAC,EAAE/J,OAAO,CAAC;UACjF,KAAK,CAAC;YACJ3B,MAAM,GAAGqM,SAAS,CAAC3H,IAAI;YACvB0H,OAAO,GAAG,IAAI3M,aAAa,CAACjB,OAAO,CAAC,CAAC;YACrC4N,OAAO,CAAC1D,YAAY,CAAC1I,MAAM,CAAC;YAC5BwI,IAAI,CAACE,YAAY,CAAC;cAChBnG,YAAY,EAAE6J,OAAO,CAAC5J,eAAe,CAAC;YACxC,CAAC,CAAC;YACF6J,SAAS,CAAC7H,IAAI,GAAG,EAAE;YACnB,OAAOgE,IAAI,CAAC3D,cAAc,CAAC,CAAC;UAC9B,KAAK,EAAE;YACLb,OAAO,GAAGqI,SAAS,CAAC3H,IAAI;YACxB,IAAI,CAACV,OAAO,EAAE;cACZqI,SAAS,CAAC7H,IAAI,GAAG,EAAE;cACnB;YACF;YACA,OAAO6H,SAAS,CAAC1H,MAAM,CAAC,QAAQ,EAAEiF,iBAAiB,CAACY,cAAc,CAAChC,IAAI,CAAC,CAAC;UAC3E,KAAK,EAAE;YACL,OAAO6D,SAAS,CAAC1H,MAAM,CAAC,QAAQ,EAAEjG,QAAQ,CAACF,OAAO,CAACuE,OAAO,CAACyF,IAAI,CAAC,CAAC;UACnE,KAAK,EAAE;UACP,KAAK,KAAK;YACR,OAAO6D,SAAS,CAACzH,IAAI,CAAC,CAAC;QAC3B;MACF,CAAC,EAAEuH,QAAQ,CAAC;IACd,CAAC,CAAC,CAAC,CAAC,CAAC;EACP,CAAC;EACDrJ,QAAQ,EAAE,SAAAA,CAAU0F,IAAI,CAAC,iBAAiB3F,QAAQ,CAAC,gBAAgBlB,OAAO,CAAC,mBAAmB;IAC5F,OAAO6G,IAAI,CAAClC,IAAI,CAAC;MACfzD,QAAQ,EAAEA;IACZ,CAAC,EAAElB,OAAO,CAAC,CAACyB,IAAI,CAAC,YAAY;MAC3B,IAAItC,iBAAiB,EAAE;QACrB,OAAO8I,iBAAiB,CAACY,cAAc,CAAChC,IAAI,CAAC;MAC/C;MACA,OAAOA,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;EACDV,cAAc,EAAE,SAAAA,CAAUhD,QAAQ,CAAC,cAAcE,QAAQ,CAAC,cAAcrD,OAAO,CAAC,sBAAsB;IACpG,IAAI0J,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;IAC7D,OAAOD,cAAc,CAACK,OAAO,CAAC,KAAK,EAAE,gBAAgB,EAAE;MACrD5G,QAAQ,EAAEA,QAAQ;MAClBE,QAAQ,EAAEA;IACZ,CAAC,EAAErD,OAAO,CAAC;EACb,CAAC;EACD4H,wBAAwB,EAAE,SAAAA,CAAUtE,KAAK,CAAC,cAActD,OAAO,CAAC,sBAAsB;IACpF,IAAI0J,cAAc,GAAGhM,YAAY,CAACb,OAAO,CAAC8M,iBAAiB,CAAC,CAAC;IAC7D,OAAOD,cAAc,CAACK,OAAO,CAAC,MAAM,EAAE,0BAA0B,EAAE;MAChEzG,KAAK,EAAEA;IACT,CAAC,EAAEtD,OAAO,CAAC;EACb;AACF,CAAC;AACDtC,YAAY,CAACb,OAAO,CAAC+N,iBAAiB,CAAC3C,iBAAiB,CAAC;AACzD,IAAI4C,QAAQ,GAAGrL,SAAS;AACxB7C,OAAO,CAACE,OAAO,GAAGgO,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}